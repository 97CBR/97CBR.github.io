<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MarxCBR的小屋</title>
  
  <subtitle>MarxCBR的小屋</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.marxcbr.cn/"/>
  <updated>2021-12-19T14:42:52.589Z</updated>
  <id>https://www.marxcbr.cn/</id>
  
  <author>
    <name>MarxCBR</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>重启家用光猫路由一体化路由器</title>
    <link href="https://www.marxcbr.cn/archives/a082046b.html"/>
    <id>https://www.marxcbr.cn/archives/a082046b.html</id>
    <published>2021-12-19T14:30:00.000Z</published>
    <updated>2021-12-19T14:42:52.589Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h2><p>此次记录的是 中国移动 H62G 家用光猫路由一体的路由器的重启方式，特别的简洁，大部分均以图片和简要的文字进行说明</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog/202112192232206.jpg" alt="img" /></p><p>有用与否请自行鉴定</p><h3 id="登录"><a class="markdownIt-Anchor" href="#登录"></a> 登录</h3><p>输入 192.168.1.1 输入，根据路由器机身后面的 说明信息获取 账号密码，进行输入即可成功登录</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog/202112192239513.png" alt="image-20211219192914777" /></p><h3 id="进入主界面"><a class="markdownIt-Anchor" href="#进入主界面"></a> 进入主界面</h3><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog/202112192239175.png" alt="image-20211219193029015" /></p><h3 id="进入管理页面"><a class="markdownIt-Anchor" href="#进入管理页面"></a> 进入管理页面</h3><p>点击下方的 “设备重启” 按钮</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog/202112192239784.png" alt="" /></p><h3 id="点击确定重启"><a class="markdownIt-Anchor" href="#点击确定重启"></a> 点击确定重启</h3><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog/202112192240005.png" alt="image-20211219193053485" /></p><h3 id="重启提示"><a class="markdownIt-Anchor" href="#重启提示"></a> 重启提示</h3><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog/202112192240205.png" alt="image-20211219193103713" /></p><p>实测路由器将会在一分钟左右就从新上线</p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog/202112192238668.jpg" alt="img" style="zoom:80%;" />]]></content>
    
    <summary type="html">
    
      重启家用光猫路由一体化路由器
    
    </summary>
    
    
      <category term="女朋友的小手册" scheme="https://www.marxcbr.cn/categories/%E5%A5%B3%E6%9C%8B%E5%8F%8B%E7%9A%84%E5%B0%8F%E6%89%8B%E5%86%8C/"/>
    
    
      <category term="路由器" scheme="https://www.marxcbr.cn/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>关于博客图片无法正常显示说明</title>
    <link href="https://www.marxcbr.cn/archives/ce7c2b4e.html"/>
    <id>https://www.marxcbr.cn/archives/ce7c2b4e.html</id>
    <published>2021-11-15T14:56:38.000Z</published>
    <updated>2021-11-15T16:52:51.135Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="404-not-found"><a class="markdownIt-Anchor" href="#404-not-found"></a> 404 NOT FOUND</h2><p><img src="http://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog/404.png" alt="MarxCBR的小屋" /></p><p>各位读者十分抱歉，本博客的图片因本人的 疏忽 以及 懒惰 导致存储在阿里云OSS上的图片均由于过期导致被清空了</p><p>本人将逐步恢复博客的图片，以及尝试新增一个图片墙的栏目</p><p>十分感谢提醒我博客图片失效的同学 @cheems骑士<img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog/202111160051787.png" alt="img" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog/202111152345367.png" alt="image-20211115225416393" /></p><p>再次致歉，各位先看着文字版的博客吧，权当是手机浏览器开启了无图浏览模式</p>]]></content>
    
    <summary type="html">
    
      关于博客图片无法正常显示说明
    
    </summary>
    
    
      <category term="小日志" scheme="https://www.marxcbr.cn/categories/%E5%B0%8F%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="小日志" scheme="https://www.marxcbr.cn/tags/%E5%B0%8F%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>毕业之旅</title>
    <link href="https://www.marxcbr.cn/archives/14ec9c68.html"/>
    <id>https://www.marxcbr.cn/archives/14ec9c68.html</id>
    <published>2021-07-25T15:18:25.000Z</published>
    <updated>2021-11-15T14:31:36.205Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="毕业之旅"><a class="markdownIt-Anchor" href="#毕业之旅"></a> 毕业之旅</h2><p>时间来到六月份毕业季，我的可爱居居女朋友也在六月份顺利毕业了。虽然刚跳槽工作入职一个月，但我仍要请假两天加上周末两天去参加她的毕业典礼以及毕业旅游。这种不错过对自己很重要的人的任何的一个里程碑的感觉，真的很棒。</p><h2 id="毕业-桂林"><a class="markdownIt-Anchor" href="#毕业-桂林"></a> 毕业-桂林</h2><p>17 号晚上到桂林，到时已经夜了。不过，桂林的天气 28 度外加没有一丝丝的风，仍是我熟悉的属于桂林市区的闷热。打个滴就到酒店了，一路上人、车都格外少，或许这就是我最后一次这么晚还从北站奔赴桂电了吧。上次这个点，从北站出发往学校方向的时候，还是大四上，十月份参加华为秋招失利后呢。为了第二天早早的就可以参加她的毕业典礼，订了在东区的酒店，开好房间便带着空空的肚子去搞了一包泡面。五点半一到下班时间，便火速离开办公室，吃了一碗粥和一个小油条，奔赴深圳北站。不过也是这次开始，我才发现了原来桶装的泡面也有两个面饼的类型了。真的太照顾我这种一包不饱两包有多的人群了，它会销量很好的，确信。<br /><img src="http://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog/IMG_20210617_221116-1.jpg" alt="深夜的北站" /></p><p>那是一个阳光很好的清晨，七点便爬起床把房退了，准备去上车。临上车前，想到应该给我居居带上一大捧花花。到周围的花店查看了一下店面，没开门营业。便逐个给美团上面的花店打电话询问是否营业，好家伙，七家周边的花店，全都没开点，这是我没想到的。 这估计跟桂电这边的毕业传统甚至广西的毕业典礼传统相关。因为，在我记忆中，广东这边的大学，好多好多大学生在毕业时都会邀请很多自己的知己好友从各个大学各个地方过来参加自己的毕业典礼，一起见证自己的人生里程碑。这时候，校门外的路都是摆满卖花的，还有各种各样跟毕业有关的物品。可惜在广西，至少在桂电，我没看到这样的一个盛况。</p><p>坐上公交到学校的时候，校毕业典礼已然进行了一半。各院的师生都坐到大草坪上，校领导、学生代表、各界代表都上台发言。流程还是一样一样的。不过他们幸好有椅子坐，天上有云，不至于炽热的阳光直接亲吻每一个人。典礼后，我看到了在散去的人群中，那个四处张望寻找我的女朋友，略显着急，脸上又是充满了期待，真可爱。哼~是我抱上她，她说出的第一句话。嗯，这是一句因思念我太久，又没法见面的“哼”，很好，她还是她，那个想我爱我的她。后续便参加院系的毕业典礼，拨穗仪式。</p><p><img src="http://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog/image-20210627012249911-22.jpg" alt="学校航拍的毕业典礼照片" /></p><p>到三院之后，见着了好多好多老师与同学们，那几个之前特别熟络的同学都跟我来了个 big bug。拨穗仪式的流程挺简单的，挺快的就完成了。但是，这个仪式却很重要。这代表着学院，学校对你的一个认可。意味着，你已经在学校中学习并领会了许许多多的技能与成长，可以带着这些知识到社会中发挥作用了。振翅高飞，不可限量。可能谈不上为国家作出多大多大的贡献，但是融入社会，并可以在社会中继续学习继续成长，并担上越来越多，越来越重要的责任是每一个毕业生的基本要求吧。</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog/image-20210627012740264-24.jpg" alt="拨穗过程" /></p><p>到了学校，她下午才可以办理完离校手续，那中午自然就是在学校吃了。可能很多人都想，在学校最后一顿怎么说都该在食堂吃吧。但是，我们选择了螺蛳粉。嗯，好久没吃这么好吃的螺蛳粉了，馋了一年了，想念。</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog/image-20210627012552552-23.jpg" alt="image-20210627012552552" /></p><p>下午办理好了离校手续之后，跟一些老师与同学道别后，便带着她，一起离开了学校，那个陪伴了她五年的校园，那个有我俩无数共同回忆的 GUET，那个教会她很多学识的桂电，那个承载着梦的地方。</p><p><img src="http://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog/IMG_20210618_094545-1624729606388-4.jpg" alt="图书馆门前的她" /></p><p><strong>在 2021 年的 6 月 18 日，我的女朋友，毕业了。</strong></p><h2 id="出发-重庆"><a class="markdownIt-Anchor" href="#出发-重庆"></a> 出发-重庆</h2><p>桂林到重庆要坐好几个钟的高铁，四个半小时左右吧。一路上，都没睡，因为她睡不着，我也不可以睡，嘿嘿。就这样，跟她一路听着《三体-科幻广播剧》，在高铁的风驰电掣中抵达了 “山城” 重庆，这个神奇的地方。经过几个小时高铁消耗的她已然略显倦意，可是，重庆西站还是给了我们一个下马威，让我们直接 <strong>&quot;找不到打车的地方”</strong>。嗯，这就是特色吧。</p><h2 id="住-环境舒适的来还要交通便利"><a class="markdownIt-Anchor" href="#住-环境舒适的来还要交通便利"></a> 住-环境舒适的来还要交通便利</h2><p>因为高铁到的是重庆西，离渝中解放碑那片地方，挺远的。而且，解放碑附近交通比较方便，以其为中心辐射周边的景点区域什么的都比较方便，又有小吃街，于是我们订的解放碑附近的酒店-麓枫酒店。跟步行街什么的，也就离着三四百米的距离，走两步就可以到了。</p><p>入住的时候，他们前台给我们免费升级了房间，住的更加舒服了一点，这个还是给他们一个大大的好评。可能是因为连订了三晚，也可能是住的人不多吧。</p><h2 id="玩-好吃的好看的东西太多了"><a class="markdownIt-Anchor" href="#玩-好吃的好看的东西太多了"></a> 玩-好吃的好看的东西太多了</h2><p>这次行程，主要都把时间花在了找吃的上面吧。俩人，跟着大众点评，小红书，美团什么的，各路神仙软件，去了大大小小好多的网红店去吃各种各样的东西。有<strong>串串、火锅、酥肉、包子、奶茶、面食</strong>。也去了很多网红景点，也在到处瞎逛的时候，看到了一下并不网红的景点。</p><h2 id="第一天"><a class="markdownIt-Anchor" href="#第一天"></a> 第一天</h2><p>第一天大早上，八点多便出门，去吃上了当地的面食。具体的名字我忘了，实在不好意思嘞~但是，料很多，面也挺好吃，当时感觉这面再劲道一点点会更好些。考虑到我们俩后续还有很多很多想吃的东西，就只叫了一碗，俩人一起吃。既不撑腹又可以甜蜜一下，何乐而不为。</p><p>吃完早餐后，那必定得去离得最近的 解放碑 逛逛嘞。不远，沿着街边走走就到了，大早上的人不是很多，车也少。一路走呀走，就拐到了解放碑。只是有点可惜，天气不是很好。但是，阴凉舒适有点风，可以让我们走好久，不怕晒。</p><img src="http://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog/IMG_20210619_093648.jpg" alt="IMG_20210619_093648" style="zoom: 50%;" /><p>第一个买的小吃是，“肖炮酥肉” 如果没记错的话，它的位置挺难找的，一个小店。忘了在哪个平台上面，它属于霸榜级别。兴致勃勃的找了半个小时才找到。但是，我说但是了，没错，就是你理解的那种但是。它虽说是网红酥肉。但是我跟女朋友俩人吃起来，实在品尝不出它的美妙。我只记得，第一口下去，麻了，我麻了。跟她都只吃了几块，就吃不下去了。为啥呢，一口口的花椒，你能吃几口呢。不知道是不是我们恰好就买到了他们家品质没控制好的那批。或者是我们实在 get 到好吃的点~</p><p>第二个吃的生煎，巧了，名字我又忘了，也算是网红店，在酥肉店附近的。要是到当地去的话，看看有啥网红生煎就懂了。这个讲真挺好吃的。哈哈哈，不是不想给他打广告，是记忆力实在不行了。没记住，或许他们可以考虑怎么宣传招牌来让顾客记得更牢。哈哈哈~</p><p>中午吃的是秀孃家的串串。这个店让我记忆清晰。这店厉害了，跟着导航走，我可以保证你永远都找不到他们家店在哪里。</p><p><img src="http://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog/image-20210627023937140.png" alt="image-20210627023937140" /></p><p>这个表情深刻表达了我们当时的心情。</p><p>因为他们家店在一个小区里面，还不是那种进门走两步就可以看到的那种，是得走好多好多步，走到你怀疑是不是走错了。但是，最终的结果，因为人太多了，找到店的快乐已经充满了脑袋瓜，而且空间稍微有点儿拥挤，就忘了拍照片。味道和价格上，还是很对得起这个找店的过程的。猜猜我们找这店找了多久，少说也有 50 分钟吧。围着它的那个小区，兜兜转转，地下通道，人行天桥，走上走下的，到处走。所有的地图都不好使，高德、腾讯啥的。最终我们还是得到了当地人的热心指引才找到了那家“神秘的店”。可能，众多食客里，也就我们俩是找不到店的吧。因为，十一点半左右，外面排队的阵仗如图：</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog/IMG_20210619_120841-7.jpg" alt="IMG_20210619_120841" /></p><p>在去找秀孃的火锅串串店时，路过了一个网咖。这个网咖，是我第一次到重庆时去的第一间店。因为，当时大三的时候抵达重庆的那天是腾讯的笔试。七点半开始笔试。所以，下车第一件事就是，找附近的网咖，把笔试给安排上。当时的场景就是，隔壁的小姐姐搁那跟跟别人 DOTA，后面的人在 LOL，还有一堆吃鸡的。只要我在角落摸摸的装着 Pycharm 和 Python 这些开发环境，然后写起我的笔试题。但是不得不说，因为现在的网咖已经大部分都没有摄像头了，所以无法让牛客网检测我的摄像头开启情况。估计后台直接就给我打上了作弊的标签······写的挺好的一份笔试题就这样无了。</p><p>吃完饭之后，就顺着街道走，在陌生的城市里，俩人牵着手，到处瞎逛着，发现着一些新奇的，有意思的景点，特色，的确是一种很 nice 的感觉。当然，城市的底蕴得够，要不然，叫你在一片沙漠里到处逛，你还能逛出花来？哈哈哈</p><p>沿着路走呀走，路过了一个花店。给她买了朵大大的菊花~，乐的她咯咯咯的笑。一路上发现了一个教堂，被一大片房子围起来。</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog/IMG_20210619_131859.jpg" alt="IMG_20210619_131859" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog/IMG_20210619_132222-9.jpg" alt="IMG_20210619_132222" /></p><p>在穿梭中，不知怎么的，便到了 郭沫若旧居</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog/IMG_20210619_140528-11.jpg" alt="IMG_20210619_140528" /></p><p>进去里面，人并不多，大多数是上了年纪的大叔大爷。里面陈列展示着很多材料和故事，甚至还有《屈原》话剧场景复现。</p><p>出来不久后，再走走就可以看到这面墙</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog/IMG_20210619_140123-10.jpg" alt="IMG_20210619_140123" /></p><p>走在步道中，忽然瞥到一个小巷子，尽头是一个咖啡馆吧，门口摆满了鲜花，布满苔藓的阶梯，还有朴实的“咖啡”二字。着实让人看着舒服。恍惚间觉着，在这样的一个地方开着一个这样的小小的咖啡馆，每天跟几个有缘到这里的人坐坐聊聊，是不是惬意文艺到起飞呢。</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog/IMG_20210619_142114-13.jpg" alt="IMG_20210619_142114" /></p><p>沿着步道往下走，可以发现一条从屋子里往步道延伸出来的桥，应该算一种桥吧。哈哈哈，这对当地人来说，可能见惯不怪。但是对于我们来说还是觉得有那么些神奇的。</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog/IMG_20210619_141647-12.jpg" alt="IMG_20210619_141647" /></p><p>走完步道后，便出发前往重庆美术馆，里面正举办着《红岩》的主题展览，一楼都是书法作品展示，二楼则是主题展览。不知道是不是因为主题展览的缘故。并没有一些油画水墨画这类的作品展览。</p><p>休息了一会后，晚上去了弹石子老街，一层一层的往下走着。发现了一个娃哈哈的奶茶店，真是太稀奇了吧，之前从未见过他们开的奶茶店。所以点了一个娃哈哈的奶茶，讲真，味道一般，可能是点的不是招牌，喝起来的感觉是带着娃哈哈的味道，以及其它材料的味道，但是还是觉得没有其它的奶茶店的好吃，可能是我比较喝果茶吧。话说，喝果茶，还不如直接吃水果？</p><p>准备继续往下走，在走到下行的步梯的时候。灯突然亮起来了，哈哈哈，一下子就烂漫起来了。谢谢开闸的大哥的神助攻。下去之后便看到了一家冰激凌店，顺道就吃了个冰激凌。她开心的说着：“嘿嘿~别的宝宝有的东西我也有喏~”。</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog/IMG_20210619_191136-14.jpg" alt="IMG_20210619_191136" /></p><p>就这样走着走着，天色便渐渐的从明亮转换成昏暗，慢慢的便可以看到高楼大厦闪烁灯火。</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog/IMG_20210619_194956-15.jpg" alt="IMG_20210619_194956" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog/IMG_20210619_200359-16.jpg" alt="IMG_20210619_200359" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog/IMG_20210619_200708-17.jpg" alt="IMG_20210619_200708" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog/IMG_20210619_201030-18.jpg" alt="IMG_20210619_201030" /></p><p>逛完弹石子老街后，便出来吃烧烤。叫啥我忘了，在弹石子后街那条巷子里。那一排排都是烧烤店。人挺多，环境看起来比较一般，跟广东这边的大排档和烧烤什么的，感觉还是差点儿意思。起码，感觉这边的场地要干净明亮些。烧烤是自己挑，然后给他们烤，各个地方都是这样子的了，没啥特别。但是，他们家的生意实在太好了，我们等了半个小时左右才把第一批的烧烤拿上来。味道是挺不错的，还有一个叫苕皮的，吃起来也有它的特色。第二批拿上来又等了差不多十分钟，但是，在还没吃完第一波的时候，就拿上来了，没啥问题的啦。第二批拿上来的吃起来，感觉可能是换了师傅烤的，稍微要比第一批的差点点，而且味道也偏咸了，反正总体味道还是挺奈斯的啦，但是个人感觉要是像我们这样特地走了差不多一个钟的路，为了吃它就有点儿大可不必了。</p><p>离这家店不远的地方，还有一段路，里面有好多好多间那种，普通房间改成 KTV 的 KTV，每一个门口都正对着街，从门外看着里面泛着一层粉红色以及各种灯球射出来的斑斓。当时还没走到，离他们几十米远就能听到震天动地的嘶吼声，或许这样形容不对，那就是豪迈的歌声！</p><h2 id="第二天"><a class="markdownIt-Anchor" href="#第二天"></a> 第二天</h2><p>第一天走了两万多步，晚上会酒店还看了一部《攀登者》才睡觉(为啥是这部片，因为电影频道的回放只能找到一天前播放过的攀登者，hhh)。睡醒感觉实在太累了，所以，临近中午才出发去吃饭，选的离酒店不远的一家店。叫 “丘二馆较场口店”。入口也是那种小小的门口，经过一个脏兮兮的楼梯，上到二楼。那条楼梯曾经勾起了我小学的记忆。那种水泥扶手，水磨地面。</p><p>到店里面之后，那生意也是火爆。俩人想找个单独的桌子都没有。最终也是跟别人拼桌，但是看到店里好多本地人用着本地的方言跟服务员和老板说话，倒是给了我不少信心。一家本地人都喜欢吃的店，应该差不了。我跟她点了四个菜，蒜泥白肉，女朋友心心念念的一道菜，可以说是为了吃这个菜才来的这个店。宫爆鸡丁，经典菜式，不能少了。手撕鸡，隔壁桌的人点了，看起来也很好吃的样子。鱼香肉丝，这无敌经典的菜式，之前在学校就吃了不少这道菜，到了这边就更得尝尝了。</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog/IMG_20210620_124846-19.jpg" alt="IMG_20210620_124846" /></p><p>蒜泥白肉，拌好汁之后吃，好吃，但是她说，没放糖，没灵魂。更多的吃到的是一个感觉，辣！宫爆鸡丁的话，一大盘基本都是花生，鸡的确是鸡丁，不多，但是花生和鸡肉都好吃，好评。手撕鸡，好家伙，只能用一句话形容，那味道是真滴辣呀，根本吃不出鸡肉的味道了。鱼香肉丝就是鱼香肉丝的味道，四道菜下来，一瓶王老吉根本不够喝。饭也早已被辣椒红油染成了红红的颜色。</p><p>下午去了磁器口，不得不说，里面的商业气息十分浓厚。去过这么多的号称古镇特色的地方旅游。似乎每个地方都搞得一样。都是借着古镇的外表，无数家店买着差不多的特产，差不多的商品，人头涌涌，喧扰纷杂。或许就是这么有意思，没去某个之前，大概自己也能猜到会是怎么样，但是你也总还是会去一趟。</p><p>逛了大半圈，便撤退了，去探索新的，没去过地方。比如，李子坝 观景台。应该是这个名字了啦。因为李子坝这仨字就足够让你检索出大把信息了。打车到达之后，是在江边。面朝渝中市区应该，我也没细致的看地理情况。背后是一栋楼，一条轻轨在楼内穿过。很多人在观景台看轻轨穿楼。但是我感觉有那么点儿小缺陷就是，李子坝站就在那栋楼里，所以，你会看到楼的左右有两列车进站。过稍许才会有车出来。这并不能让人有一种连贯的感觉，就那种，一列车从楼的左边呼呼的穿梭到右边的那种连续连贯的感觉。不过，之前没有见过轻轨过楼的场面，也是让人觉着挺有意思的。</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog/IMG_20210620_170056.jpg" alt="IMG_20210620_170056" /></p><p>接下来便前往 大扶梯，emmmm，咋个说。并未给到我们一个比较大的印象，就一列电梯，长长的，挺多人。不过，在电梯运行的中段的时候，往上往下看都不易看到头。视野所在均为电梯和人头，这时，如果你的坐标参考系有那么点儿混乱的话。你会感觉自己是垂直下降，而自己又是斜站在楼梯上的感觉。不好描述，有点奇妙，顺路可以去试试。</p><p>然后打了个的过 洪崖洞，准备看看洪崖洞的景观以及夜景，洪崖洞作为网红景点，人流量自然是比较大的。我记得以前去的时候，并不需要去公众号上预约的。但是，现在去的时候，需要预约，可能是因为疫情的原因 bia。但是，进去了里面之后，发现卖的都是那几乎可以说是千篇一律的 火锅底料、酥肉小吃等物品，还有一众采耳店。我女朋友好早好早之前就想采耳体验一下，所以，我们也随便挑了一家店，试试这边的特色，采耳。套餐啥的，我忘了，emmm，大概就是 基础采耳、洗耳啥的，然后叠加一下，变成各种套餐。我寻思体验一下采耳，就不搞洗耳了。但是，在采耳的过程中，给我采耳的小妹疯狂给我推荐洗耳，整个采耳过程，约莫十分钟左右，甚至不到。给我推荐了五六回，她怂恿我道：你老婆都洗耳了，你也洗一个吧，会好很多。然而仍旧得到了我 拒绝升级套餐的答复。然后，我采耳完了之后，我女朋友的确选择了 升级 洗耳套餐，看起来像是用湿润的棉签去把耳道清洁干净。但是就这一个小服务，竟然要多收六十。还是有点儿小坑 bia。事后，女朋友告诉我，她说，给他采耳的小妹也说，你老公都洗耳了，你也洗一个吧。因为采耳的时候，你并不方便大声说话，环境又嘈杂，只能沉默的给他们采耳，你信息就难以进行沟通与确认。哈哈哈，多好的一个利用信息不对等的商业案例。</p><p>不知不觉到了晚上，寻思着，到重庆怎么能不吃一顿火锅，要红锅的那种。六点多，饭点时间，要排好久队。一开始预约 佩姐老火锅，但是实在太火爆了。要等十几二十号，无奈就此作罢。转移场地到 沧龙火锅。 这边等的挺快，十几分钟就可以上桌了。门口有雪糕冰棍可以自取，一人一根。挑了个葡萄味的冰棍和一个雪糕。不过，他们在门口炒火锅底料实在是，真的是，太太太，让人容易打喷嚏了。到这店的第一个动作，不是拿冰棍，也不是找门口的接待员说排号。而是先打上几个喷嚏·······</p><p>等到可以就坐的时候，是可以用手机扫码点餐的，不过现在应该大部分地方都是这样了吧。毕竟方便的来，也好管理。选了一个套餐，两个人吃绰绰有余。</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog/IMG_20210620_203827-20.jpg" alt="干一个虾滑" /></p><p>由于实在太辣了，吃的就很慢很慢，过程中，疯狂喝饮料，酸梅汁根本不够喝。吃完之后就已经很晚了，店里人都走一半多了。但是空气依旧是火辣且带劲的。出门之后，就准备出发去看洪崖洞，因为想吃完晚饭，洪崖洞的灯饰都亮起来了再去看景色。懒得走这么远了，才挑的这么近的餐厅。</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog/IMG_20210620_215110.jpg" alt="IMG_20210620_215110" /></p><p>洪崖洞的夜景确实挺好看，金黄色的灯条，镶嵌在洪崖洞的建筑的边上，一整片过去，浩浩荡荡，甚是壮观，恍惚间有种重现繁华的历史的感觉，当然不会这么亮啦。甚至在桥上拍照片的人，也是络绎不绝。</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog/image-20210725021557324-26.jpg" alt="image-20210725021557324" /></p><p>这条桥，在白天傍晚时分就已经有很多很多的人在桥上看景色了，等到了晚上，更是热闹，会一路延续到桥中间。之前清明节那一次，更是厉害，整条桥都封了，很多很多的行人就桥上走着，偶尔会听到桥底的地铁轰隆的行驶声，伴随着一种并不是很明显的震动。还是有那么点儿吓人的，当然多体验几次就习惯了。</p><h2 id="第三天"><a class="markdownIt-Anchor" href="#第三天"></a> 第三天</h2><p>第三天的行程其实相对比较紧凑，因为一点钟的高铁要赶回深圳，毕竟要上班的嘛，打工人，打工魂！所以，中午去附近恰个饭就准备过高铁站了，女朋友则需要回南京复习。所以，选择了就近的一家店，饭粑跎。店里的装修风格较为特别，充满的一股怀旧的气息，地面是以前的那种水泥地，墙面则是青砖墙面，没有什么粉刷，很朴实无华。而桌子则是经典的方桌，加上经典的桥凳，一个筷子盅，真的经典。</p><p>叫了一个剁椒猪蹄子、豆花、蒜泥白肉（没错又是它，而且比之前那家的好吃）、排骨饭、一壶青梅酒。味道都是很 nice 的，可惜我只是一个不懂表达美味的程序员。因为味觉跟嗅觉，你是很难从文字上表达出来的，没品尝过就是不太能懂那种滋味。它就这样刻在你脑子里面的某一处，你努力回忆，似乎也难以寻回那种味蕾和嗅觉上的滋味。只能在以后，不经意间，你闻到了，你尝到了，在哪体验过这滋味呢，在哪呢，噢~想起来了······那人那味那斑驳依稀的往日时光</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog/IMG_20210621_114755.jpg" alt="IMG_20210621_114755" /></p><p>吃完之后，就跟我的无敌宝贝大可爱居居分别了。临别之际，真的有许多的不舍，这一别又得等两个月左右才能相见，多想跟她在一起腻歪着，一起探索新的城市，新的地标，回去之后，有许许多多的回忆，可以像我此时此刻一样，久经时间之后，仍能如数家珍似的回忆着，怀念着，谈笑风生。</p><h2 id="结语"><a class="markdownIt-Anchor" href="#结语"></a> 结语</h2><p>以这欢乐的三天重庆之游来给美妙的大学生活画上圆满的句号，也算是对未来美好生活起了一个好的开始，希望以后的生活也能如旅游般轻松惬意快乐无比。</p><p>未来可期</p>]]></content>
    
    <summary type="html">
    
      我和居居的毕业之旅
    
    </summary>
    
    
      <category term="小日志" scheme="https://www.marxcbr.cn/categories/%E5%B0%8F%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="旅行" scheme="https://www.marxcbr.cn/tags/%E6%97%85%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio 远程调试软件</title>
    <link href="https://www.marxcbr.cn/archives/bd777f4a.html"/>
    <id>https://www.marxcbr.cn/archives/bd777f4a.html</id>
    <published>2021-01-21T12:09:11.000Z</published>
    <updated>2021-01-21T13:59:09.718Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>今天搞一篇VS相关的内容，为啥要用到远程部署调试，这个也是有缘由的。要不，闲着蛋疼用它作甚，本地调试它不香？</p><p>主要是<a href="https://www.marxcbr.cn/archives/109d9c59.html">上一篇文章</a>说到的那个项目，U盘文件加密软件的项目。为了测试一些功能，得疯狂拔插它，看他正不正常，看它稳定不稳定。那拔插就拔插啊，关远程啥事。其实也没啥影响，就是，有点麻烦，测一次就得将双手从键盘上挪走，去拔插那已经被插到松动的扩展坞，有时还不会识别，气不气嗦。</p><p>所以，今天还真的用远程调试来比较舒服些，那我远程部署到哪里调试呢，那当然是部署到虚拟机里面呀。那缘何要放虚拟机里面，前面说了，因为我懒。。。</p><p>哈哈哈，主要是虚拟机有硬件连接的功能啦，就是VM右下角那个东西，它给我提供了懒的基础。</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog%5C20629640b6582adbceaccd3871d7e209.png" alt="20210121202604" /></p><p>这显示倆，是因为我怼了俩U盘，一个接到主机一个接到虚拟机，点它就可以选择对应的U盘是否接入虚拟机</p><h2 id="部署环境"><a class="markdownIt-Anchor" href="#部署环境"></a> 部署环境</h2><h3 id="接入测试用u盘"><a class="markdownIt-Anchor" href="#接入测试用u盘"></a> 接入测试用U盘</h3><p>插到主机USB口之后，会让你选接入到的设备，我这里全部接到主机</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog%5C5697c5b94161cef5adf8273dd294fb0b.png" alt="20210121201858" /></p><h3 id="部署远程调试软件到虚拟机中"><a class="markdownIt-Anchor" href="#部署远程调试软件到虚拟机中"></a> 部署远程调试软件到虚拟机中</h3><p>扯犊子这么久，正文开始。</p><p>将 <strong>msvsmon.exe</strong> 所在的目录整个拖过去，这个工具只要是安装了VS的，都会有，例如我的 msvsmon.exe 路径为 E:\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\Remote Debugger\x64 ，因为我主机、虚拟机以及部署调试的软件均为64位，所以选择64位的程序</p><p>拖过去之后，右键管理员运行之，会让你授权管理员，以方便配置防火墙等服务，如果不以管理员运行，到时走到最后一步部署的时候，会有下图说需要管理员运行</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog%5Cdfed84058b929bbf2bbd630761bad539.png" alt="20210121204536" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog%5Cbaef079ff6ca7aba4d33b5ca3e83ba66.png" alt="20210121203308" /></p><p>哟西，授权后，启动起来了</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog%5C458ac8da9cbf1ec411ec794402820016.png" alt="20210121203407" /></p><p>打开选项，进行配置，选 <strong>无身份验证</strong> 然后，最长空闲时间<strong>设为0</strong>，因为我记得设为0是无限等待。</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog%5C60363f1bbfee0b3c73270128c080ca89.png" alt="20210121203608" /></p><p>差不多了，虚拟机这边就这样了。</p><h3 id="配置主机端的开发项目"><a class="markdownIt-Anchor" href="#配置主机端的开发项目"></a> 配置主机端的开发项目</h3><p>来到项目配置，选择 调试 然后，切换到 远程 Windows 调试器</p><p>然后，<strong>设置好运行命令，工作目录，远程服务器的名字，环境，以及部署的目录，还有其他要部署的文件</strong></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog%5Ca93e8480a4835481ffddc90ab4fa20ae.png" alt="20210121205146" /></p><p>在这里，记一下这几个点</p><blockquote><ul><li><p>这个其它要部署的文件，可以自动将依赖复制过去，比如我这里写的 cryptopp.dll 这个，如果不自动复制过去的话，手动复制的话，有多蛋疼，懂得都懂</p></li><li><p>远程服务器名称，可以用 whoami 看</p></li></ul></blockquote><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog%5C4147c962a2f1cfd573c296316d13ee0d.png" alt="20210121205711" /></p><blockquote><ul><li>部署目录如果不写，会无法自动部署，如下，灰格子</li></ul></blockquote><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog%5C1bd04a2646632c1cc9fcbb744dfe24ac.png" alt="20210121205846" /></p><p>配置完毕后，选择好要用的调试器</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog%5C783dba67fcead5c2f6ade0398ff494bb.png" alt="20210121210628" /></p><p>点击调试，启动，芜湖，起飞</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog%5C3955be342d68de0da19984b11ea54c66.png" alt="20210121210726" /></p><p>往虚拟机一看，芜湖，坠机</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog%5C36313f3058f36377bc64d223193d38e7.png" alt="20210121210806" /></p><p>好嘛，忘了将QT的dll弄过去了。</p><blockquote><p>这里有点儿小坑，似乎是没法将本地机器的目录在配置里面直接拷到远程机器的，为了弄清能不能直接部署目录下的文件过去，特地查了一些官网说明 <a href="https://docs.microsoft.com/zh-cn/visualstudio/debugger/remote-debugging-cpp?view=vs-2019">https://docs.microsoft.com/zh-cn/visualstudio/debugger/remote-debugging-cpp?view=vs-2019</a></p></blockquote><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog%5Ce867a4c9852add47cc37a9ad289d4ecf.png" alt="20210121211118" /></p><p>所以，远程机器并未安装有QT的环境，所以，是不行的。那只能指定要复制哪些dll过去了，或者手动将需要的dll复制过去</p><p>那我又不知道缺失什么dll，一个一个点确定，再一个一个复制过去，那不显得很憨？</p><p>所以，就用QT的部署工具，将依赖dll全部给整出来，然后再全部复制到远程机器上</p><p>Windows键之后，找到QT的命令行，然后输入一下命令，当然你得换换路径啦</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog%5C284d365d9c9c79bd8fe20f896f1c597f.png" alt="20210121211751" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> E:\Code\UdiskEncryptTools\UdiskEncryptTools\x64\Debug &amp;&amp; windeployqt UdiskEncryptTools.exe</span><br></pre></td></tr></table></figure><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog%5C1bbe0f12817a0cae1f7d7e8b06110743.png" alt="20210121211940" /></p><p>自动打包后，依赖的dll就全部都在这里了，来看看目录</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog%5Cf4af783e032275ae90f3fe577f79fa76.png" alt="20210121212033" /></p><p>没毛病，将这些文件全部都复制到远程机器上</p><p>再来远程调试一次</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog%5Cf9c360223e23fc6885dd3eaa60c8a63f.png" alt="20210121212430" /></p><p>好家伙，还缺一个dll，ucrtbased.dll，这家伙在C:\Windows\System32 目录下，手动复制一下到虚拟机上</p><p>再来一次，肯定可以了</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog%5Cb5279a1d12f84733555c2c8eb3cee18e.png" alt="20210121213149" /></p><p><strong>芜湖，起飞！</strong></p><h2 id="断点调试"><a class="markdownIt-Anchor" href="#断点调试"></a> 断点调试</h2><p>在 处理插入U盘处下断，看看是否正常命中</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog%5C0259856f083dcc6026219dcf6584fc1d.png" alt="20210121213327" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog%5Ca845f1c1fa118676e8cc32fc7e7ab262.png" alt="20210121202534" /></p><p>这里要用到前面说的，将U盘从主机接到虚拟机</p><p>然后可以看到命中断点，以及调试信息什么的，都是正常的，岂一个美滋滋了得 ~</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog%5Cc1a4fc829b01dbc5494cffd57228e3fc.png" alt="20210121213535" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog%5C8017c656ba98e41a3797d0b4c0f1fe26.png" alt="20210121213612" /></p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>折腾这么久（其实写文章花了不少时间），就为了节省拔插U盘的时间，顺便复习一波VS远程部署调试的小技能。哈哈哈，阔以了，快乐了，调试去~</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog%5C6597a437dde934717c9610a47c6c0d3b.png" alt="20210121201216" /></p><center>要是感觉不错的话，就留个言评论一下下呀，欢迎各位大哥指正</center>]]></content>
    
    <summary type="html">
    
      Visual Studio 远程自动部署调试软件
    
    </summary>
    
    
      <category term="C++" scheme="https://www.marxcbr.cn/categories/C/"/>
    
      <category term="Visual Studio" scheme="https://www.marxcbr.cn/categories/Visual-Studio/"/>
    
    
      <category term="C++" scheme="https://www.marxcbr.cn/tags/C/"/>
    
      <category term="Visual Studio" scheme="https://www.marxcbr.cn/tags/Visual-Studio/"/>
    
  </entry>
  
  <entry>
    <title>解决 C++ 在调用 Cryptopp EAX 加密模式时无法进行MDD动态编译问题</title>
    <link href="https://www.marxcbr.cn/archives/109d9c59.html"/>
    <id>https://www.marxcbr.cn/archives/109d9c59.html</id>
    <published>2021-01-20T13:38:00.000Z</published>
    <updated>2021-11-15T15:34:49.225Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>许久未更新，实在没想到这一拖就是几个月，小半年也过去了。这段时间，没能坚持写一下内容出来，也是没办法。工作了，就没有了上学时的清闲，但是这都是主观的。客观上还是有时间的，只不过是自己懒了，嘿嘿，不辩解了，回到正文吧，看看有没有小伙伴遇到这个问题。</p><h2 id="问题描述"><a class="markdownIt-Anchor" href="#问题描述"></a> 问题描述</h2><p>问题来源是现在空闲着写来玩的一个项目，主要是做U盘文件加密解密的一个小软件。这个时候，就需要加密算法了，我这么懒不可能手撸加密算法的，而且要是在加密的过程中，可以采用多种加密算法的话，就更好了。有OPENSSL和Cryptopp给我选，然后快乐的选择了Cryptopp，以为OPENSSL在大一我编译它的时候，给我留下了不少阴影，哈哈哈，当年可真菜，虽然现在也一样。</p><p>看一下导致问题的代码,摘抄一部分如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">typedef</span> EAX_Final&lt;AES, <span class="literal">true</span>&gt; aes_encryption;</span><br><span class="line"> <span class="keyword">typedef</span> EAX_Final&lt;AES, <span class="literal">false</span>&gt; aes_decryption;</span><br><span class="line"> aes_encryption* encoder_;</span><br><span class="line">aes_decryption* decoder_;</span><br><span class="line">encoder_ = <span class="keyword">new</span> aes_encryption();</span><br><span class="line">encoder_-&gt;SetKeyWithIV(aes_key_, aes_key_.size(), iv_);</span><br></pre></td></tr></table></figure><p>然后，编译的时候，快乐的报错就来了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1&gt;symmetryEncrypt.obj : error LNK2001: 无法解析的外部符号 <span class="string">&quot;protected: virtual void __cdecl CryptoPP::EAX_Base::SetKeyWithoutResync(unsigned char const *,unsigned __int64,class CryptoPP::NameValuePairs const &amp;)&quot;</span> (?SetKeyWithoutResync@EAX_Base@CryptoPP@@MEAAXPEBE_KAEBVNameValuePairs@2@@Z)</span><br><span class="line">1&gt;symmetryEncrypt.obj : error LNK2001: 无法解析的外部符号 <span class="string">&quot;protected: virtual void __cdecl CryptoPP::EAX_Base::Resync(unsigned char const *,unsigned __int64)&quot;</span> (?Resync@EAX_Base@CryptoPP@@MEAAXPEBE_K@Z)</span><br><span class="line">1&gt;symmetryEncrypt.obj : error LNK2001: 无法解析的外部符号 <span class="string">&quot;protected: virtual unsigned __int64 __cdecl CryptoPP::EAX_Base::AuthenticateBlocks(unsigned char const *,unsigned __int64)&quot;</span> (?AuthenticateBlocks@EAX_Base@CryptoPP@@MEAA_KPEBE_K@Z)</span><br><span class="line">1&gt;symmetryEncrypt.obj : error LNK2001: 无法解析的外部符号 <span class="string">&quot;protected: virtual void __cdecl CryptoPP::EAX_Base::AuthenticateLastHeaderBlock(void)&quot;</span> (?AuthenticateLastHeaderBlock@EAX_Base@CryptoPP@@MEAAXXZ)</span><br><span class="line">1&gt;symmetryEncrypt.obj : error LNK2001: 无法解析的外部符号 <span class="string">&quot;protected: virtual void __cdecl CryptoPP::EAX_Base::AuthenticateLastFooterBlock(unsigned char *,unsigned __int64)&quot;</span> (?AuthenticateLastFooterBlock@EAX_Base@CryptoPP@@MEAAXPEAE_K@Z)</span><br><span class="line">1&gt;E:\UdiskEncryptTools.exe : fatal error LNK1120: 5 个无法解析的外部命令</span><br></pre></td></tr></table></figure><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog%5Cae5633098a85569d03cc2bcda9d08b9e.png" alt="20210120205550" /></p><h2 id="分析问题"><a class="markdownIt-Anchor" href="#分析问题"></a> 分析问题</h2><p>在这里可以清楚的看到它提示，缺少EAX_Base类下面的SetKeyWithoutResync、AuthenticateBlocks、Resync…这些函数。</p><p>跟进一下 EAX_Final 这个类，可以看到他是继承自 EAX_Base，而 EAX_Base 又继承自 AuthenticatedSymmetricCipherBase, 然后缺失的函数都在这里类里面。</p><p>部分代码摘抄如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">CRYPTOPP_NO_VTABLE</span> <span class="title">EAX_Base</span> :</span> <span class="keyword">public</span> AuthenticatedSymmetricCipherBase</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// AuthenticatedSymmetricCipher</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">AlgorithmName</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">  ...</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"> template &lt;class T_BlockCipher, bool T_IsEncryption&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EAX_Final</span> :</span> <span class="keyword">public</span> EAX_Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">StaticAlgorithmName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  ...</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetKeyWithoutResync</span><span class="params">(<span class="keyword">const</span> byte *userKey, <span class="keyword">size_t</span> keylength, <span class="keyword">const</span> NameValuePairs &amp;params)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Resync</span><span class="params">(<span class="keyword">const</span> byte *iv, <span class="keyword">size_t</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">AuthenticateBlocks</span><span class="params">(<span class="keyword">const</span> byte *data, <span class="keyword">size_t</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AuthenticateLastHeaderBlock</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>好的，有定义和声明的话，肯定是没问题的。再编译一次这个cryptopp.dll看看，然后再编译咱们的项目。依旧是提示缺失这几个东西。我。。。。</p><p>不急，一步一步来，看看dll里面有没有这个EAX的东西，用DLL Export Viewer 打开 cryptopp.dll看看<br />太多了不想翻，直接搜 EAX</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog%5C02a4a438a29d2c02222c9edd0452de22.png" alt="20210120211829" /></p><p>还真没有 -_-</p><p>那就说明了，编译dll的时候，就没有导出这个函数，那肯定找不到符号嗦。那我们只要将它声明导出函数就可啦。</p><h2 id="解决之路"><a class="markdownIt-Anchor" href="#解决之路"></a> 解决之路</h2><p>来打开cryptopp的项目，找到编译dll的项目</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog%5C043e62dcb921f27b7515c221f4b8eed5.png" alt="20210120212135" /></p><p>然后会发现找不到eax.h 和 eax.cpp</p><p>所以，手动添加进来，添加现有项即可</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog%5C9c9695d0a64d7750d47869e77658973d.png" alt="20210120212307" /></p><p>添加好之后，兴冲冲的编译dll，然后去编我的exe，然后还是没找到</p><p>淦</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2019-6-9/VS%E5%88%9B%E5%BB%BAQT%E5%B7%A5%E7%A8%8B%E5%B9%B6%E6%B7%BB%E5%8A%A0%E5%88%B0GitHub%E4%B8%AD/1560080829083.png" alt="" /></p><p>所以还是有问题的，回去看eax的源码，比对一下其它有导出函数的类的区别</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog%5C43083492c6b5d115aceaed9cdb13ae63.png" alt="20210120212555" /></p><p>答案是一目了然的，它缺了一个宏来修饰，以下是这个宏的声明，是用来声明导出的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> CRYPTOPP_DLL __declspec(dllexport)</span></span><br></pre></td></tr></table></figure><p>那解决方案也呼之欲出了，将这个宏加上就可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eax.h</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CRYPTOPP_DLL</span> <span class="title">CRYPTOPP_NO_VTABLE</span> <span class="title">EAX_Base</span> :</span> <span class="keyword">public</span> AuthenticatedSymmetricCipherBase</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// AuthenticatedSymmetricCipher</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">AlgorithmName</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">  ...</span></span><br></pre></td></tr></table></figure><h2 id="编译"><a class="markdownIt-Anchor" href="#编译"></a> 编译</h2><p>编译一手</p><p>8核16线程的U跑起编译来简直不要太舒服<br /><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog%5Cdb7306c6d5adaee5bb4f13ebcdc46ab2.png" alt="20210120213126" /></p><p>用工具看看是否有导出函数了，可以看到找到了，稳了</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog%5C548cbb5b43a06a366baf3cd9765fddad.png" alt="20210120213355" /></p><p>编译项目EXE去看看，也正常起来了</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog%5Cb8c227fc21a149d2d1403156e53d71b4.png" alt="20210120213602" /></p><p>嗯，差不多了，问题解决了，文字也到这里了，要是能帮到遇到同样问题的同学就最好了，没的话，我下次扑街了也好看博客来找到解决方案</p><center>要是感觉不错的话，就留个言评论一下下呀，欢迎各位大哥指正</center>]]></content>
    
    <summary type="html">
    
      解决 C++ 在调用 Cryptopp EAX 加密模式时无法进行MDD动态编译问题
    
    </summary>
    
    
      <category term="C++" scheme="https://www.marxcbr.cn/categories/C/"/>
    
      <category term="Visual Studio" scheme="https://www.marxcbr.cn/categories/Visual-Studio/"/>
    
    
      <category term="C++" scheme="https://www.marxcbr.cn/tags/C/"/>
    
      <category term="Visual Studio" scheme="https://www.marxcbr.cn/tags/Visual-Studio/"/>
    
      <category term="Cryptopp" scheme="https://www.marxcbr.cn/tags/Cryptopp/"/>
    
  </entry>
  
  <entry>
    <title>我的大学(︶.̮︶✽)大三</title>
    <link href="https://www.marxcbr.cn/archives/c6a55137.html"/>
    <id>https://www.marxcbr.cn/archives/c6a55137.html</id>
    <published>2020-07-18T08:21:54.000Z</published>
    <updated>2020-12-23T13:48:32.322Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容"><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="This blog is encrypted.You must enter the password to read." /><label>This blog is encrypted.You must enter the password to read.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="62729966482d85f9c91b73d3fa6994bd86ceba04d91b13ab09a2057251c10537"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      我的大学(︶.̮︶✽)大三
    
    </summary>
    
    
      <category term="小日志" scheme="https://www.marxcbr.cn/categories/%E5%B0%8F%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="小日志" scheme="https://www.marxcbr.cn/tags/%E5%B0%8F%E6%97%A5%E5%BF%97/"/>
    
      <category term="我的大学" scheme="https://www.marxcbr.cn/tags/%E6%88%91%E7%9A%84%E5%A4%A7%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>我的大学(︶.̮︶✽)大二</title>
    <link href="https://www.marxcbr.cn/archives/84f9c73a.html"/>
    <id>https://www.marxcbr.cn/archives/84f9c73a.html</id>
    <published>2020-07-12T08:20:54.000Z</published>
    <updated>2020-12-23T13:48:32.323Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容"><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="This blog is encrypted.You must enter the password to read." /><label>This blog is encrypted.You must enter the password to read.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="31628a70a58761d65a549f4d8ae6398fe0ff8a3bbc8d6518e600049e390b48a6"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      我的大学(︶.̮︶✽)大二
    
    </summary>
    
    
      <category term="小日志" scheme="https://www.marxcbr.cn/categories/%E5%B0%8F%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="小日志" scheme="https://www.marxcbr.cn/tags/%E5%B0%8F%E6%97%A5%E5%BF%97/"/>
    
      <category term="我的大学" scheme="https://www.marxcbr.cn/tags/%E6%88%91%E7%9A%84%E5%A4%A7%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>我的大学(︶.̮︶✽)大一</title>
    <link href="https://www.marxcbr.cn/archives/bf79e993.html"/>
    <id>https://www.marxcbr.cn/archives/bf79e993.html</id>
    <published>2020-07-11T08:19:54.000Z</published>
    <updated>2020-12-23T13:48:32.322Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容"><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="This blog is encrypted.You must enter the password to read." /><label>This blog is encrypted.You must enter the password to read.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="28f1bed6507dbb5b7c64ff7d96146ba857c74ac3d1dc6b089b914aec9bc793e9"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      我的大学(︶.̮︶✽)大一
    
    </summary>
    
    
      <category term="小日志" scheme="https://www.marxcbr.cn/categories/%E5%B0%8F%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="小日志" scheme="https://www.marxcbr.cn/tags/%E5%B0%8F%E6%97%A5%E5%BF%97/"/>
    
      <category term="我的大学" scheme="https://www.marxcbr.cn/tags/%E6%88%91%E7%9A%84%E5%A4%A7%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>四年大学之毕业感想</title>
    <link href="https://www.marxcbr.cn/archives/9b1b667b.html"/>
    <id>https://www.marxcbr.cn/archives/9b1b667b.html</id>
    <published>2020-07-09T18:27:20.000Z</published>
    <updated>2020-12-23T13:48:32.321Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>四年的时间真的很快，回首往日，2016年入学桂电，在我爸车中四处张望，观察着即将生活四年的的大学环境的我，充满好奇。那时的我心想着，这就是我的大学吗，我即将生活四年的地方，真好。<br />很多人看似嫌弃的吐槽桂电，但是我却经常为自己能到桂电上大学感到有幸运。桂电很大，人才很多，虽比不上清华，但是毕竟是南方…,诶~懂的都懂。认真学习，过个不轻松的大学可以保证自己能学到很多很多的知识和技能。我也在好好的学习和实践中拿到了一些奖项以及赚了不少的生活费，毕业设计还有幸拿到了校优二等。<br />细细想来，我的大学似乎就是以社团为支点，撑起我的学习、社交。有幸加入到七星瓢虫工作坊这个社团中，还做了挺长一段时间的负责人。这个社团应该就是我大学待过最长的地方了，在宿舍也不够社团呆的长~~~毅神、CSB他们上一届的学长给了我很多指导，同届的雄哥能经常帮我纠错和监督我，蒋总也跟我一起负责社团一些事务，而kwins则无限骚话，MXC、YCJ这些学弟又真的是有趣，即能帮干一下小活又能带我游戏上分，社团里面有你们真好。<br />兄弟社团中的涛涛、帅展、莫总等等一群大佬总能带我飞，跟在后面躺着真滴舒服。<br />还有幸带了一群小班，是很可爱的同学呢，跟他们交流的时候，时候都可以看到以前自己懵懂的样子。<br />最后我的女朋友温柔可爱，经常乖巧的呆在我身边陪我学习，以及带我吃很多好吃的，才发现学校有这么多好吃的，有个人在旁边陪着学习工作聊天，乐呵乐呵的是这么幸福的。<br />我的导师姚老师，真滴真滴十分好十分的让我敬爱的一位导师，帮了我无数的忙，也给我了很多的指引和关心，十分感激，我不会忘记在社团打游戏被姚总敲脑阔的场景的。<br />宿舍我感觉呆的时间不长，但是，大学的宿舍的兄弟萌个个都是人才，而且换了一次宿舍让我拥有了更多的舍友，不管是前舍友还是现舍友，现在都是曾经的舍友了。你们的泡面之情，开黑之夜，真滴太骚了，以后有机会再来一波？<br />虽然还有很多事情没有做，比如桂林的很多景点没有去逛过，没有去蹭过其他学院的课，没能像姐大那样奖状拿到手软~<br />最后被我点名了的兄弟萌原谅我，还有很多兄弟的代号没写，因为怕整出一个年级大点名。你们都留着了我的回忆和记录中。感谢大家长久以来的帮助和关照~<br />大家出来工作了或者继续深造读研了，都各奔前程。虽此次离别注定长久不见，但是在江湖上行走时总会相见的，我们下次见面的时候会是怎么样呢，因为世界不大也不小~</p>]]></content>
    
    <summary type="html">
    
      毕业了
    
    </summary>
    
    
      <category term="小日志" scheme="https://www.marxcbr.cn/categories/%E5%B0%8F%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="小日志" scheme="https://www.marxcbr.cn/tags/%E5%B0%8F%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>Windows下部署使用Cuckoo Sandbox布谷鸟沙箱</title>
    <link href="https://www.marxcbr.cn/archives/de6fa1ef.html"/>
    <id>https://www.marxcbr.cn/archives/de6fa1ef.html</id>
    <published>2020-06-23T08:43:44.000Z</published>
    <updated>2020-12-23T13:48:32.318Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>上一篇文章已经说了我为何要在Windows下部署Cuckoo，就是为了省点内存，提高体验。然后Cuckoo在Windows下在安装部署文档是空的。</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/d9e49e05ed1c15bea791a1efdaa184ad.png" alt="Windows布谷鸟" /></p><p>好一个 To be documented ~<br />幸好<strong>Python的代码是跨平台的</strong>，所以，不慌它，奥利给，干了<br />上一篇文章已经搭建好布谷鸟所需要的虚拟机环境（即沙箱），这里主要记录cuckoo搭建的一些小坑</p><h2 id="安装python27"><a class="markdownIt-Anchor" href="#安装python27"></a> 安装Python27</h2><p>因为Cuckoo的安装要求是在Python2下面的，所以安装Python27</p><p><a href="https://www.python.org/downloads/release/python-2718/">Python2.7.18 下载页面</a></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/0ae942b2abf77eb0c011cb8dc8e98e83.png" alt="Windows布谷鸟" /></p><p>下载回来之后，安装好。</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/b7fa84b29c2d3fe96ce1e5c0b243dea8.png" alt="Windows布谷鸟" /></p><h2 id="安装cuckoo"><a class="markdownIt-Anchor" href="#安装cuckoo"></a> 安装Cuckoo</h2><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/2f2f23ad0ecc0058bc6c4fbc4710dca1.png" alt="Windows布谷鸟" /></p><p>U1S1,Pycharm他们Jetbrain家 的Loading图是真的帅。<br />来到设置里面的解析器的包管理页面，安装一下cuckoo，用pip直接装也一样的，我这里是因为环境有点乱了，pip也乱了，IDE里也配置了镜像源，就开个IDE省事。</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/bf78cd85d39a6cba1ddcb9607ee0843a.png" alt="Windows布谷鸟" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/684f76e6209c2bd497ed9978fef8e906.png" alt="Windows布谷鸟" /></p><div class="note info flat"><p>在这个步骤如果出现GMS、Crypto库编译错误什么的，可以安装VC的一个Python环境即可<br />下载安装 <a href="https://www.microsoft.com/en-us/download/details.aspx?id=44266">Microsoft Visual C++ Compiler for Python 2.7</a></p></div><h3 id="安装pil-pillow"><a class="markdownIt-Anchor" href="#安装pil-pillow"></a> 安装PIL、Pillow</h3><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/3c2b1d051e59187746715fcf117f3c2e.png" alt="Windows布谷鸟" /></p><h3 id="安装pymongo"><a class="markdownIt-Anchor" href="#安装pymongo"></a> 安装pymongo</h3><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/36d8c65f71790c95e2d6c66c1fcc7296.png" alt="Windows布谷鸟" /></p><h2 id="初始化cuckoo"><a class="markdownIt-Anchor" href="#初始化cuckoo"></a> 初始化Cuckoo</h2><blockquote><p>cuckoo init</p></blockquote><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/878926c13f84f19ae46b3c66afd0b39d.png" alt="Windows布谷鸟" /></p><div class="note info flat"><p>如果出现启动错误，那就需要将用户目录下的.cuckoo目录删除掉</p></div><h2 id="启动cuckoo"><a class="markdownIt-Anchor" href="#启动cuckoo"></a> 启动Cuckoo</h2><blockquote><p>cuckoo -d</p></blockquote><p>安装了VirtualBox 6.1 ，但是还是出现了这个报错<br />Potentially vulnerable virtualbox version installed. Failed to retrieve its version. Update if version is: 6.0.5</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/11a895a82eb1869dcfabe755093a5a3b.png" alt="Windows布谷鸟" /></p><p><strong>修改配置文件，跳过检测即可</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- C:\Users\你的用户名\.cuckoo\conf\cuckoo.conf --&gt;</span></span><br><span class="line">ignore_vulnerabilities = yes</span><br></pre></td></tr></table></figure><blockquote><p>修改好之后，启动看看，可以发现找不到vboxmanage<br />报错提示我们，我们还有配置文件没修改，找到virtualbox.conf，修改path的值为我电脑上的virtualbox的目录下的vboxmanage路径</p></blockquote><p>2020-06-21 10:55:00,121 [cuckoo] CRITICAL: CuckooCriticalError: VirtualBox’ VBoxManage not found at specified path “/usr/bin/VBoxManage” (as specified in virtualbox.conf). Did you properly install VirtualBox and configure Cuckoo to use it?</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/d3989ef69686a011e9645c6d0fdfeb31.png" alt="Windows布谷鸟" /></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- C:\Users\你的用户名\.cuckoo\conf\virtualbox.conf --&gt;</span></span><br><span class="line"></span><br><span class="line"># Path to the local installation of the VBoxManage utility.</span><br><span class="line"># path = /usr/bin/VBoxManage</span><br><span class="line">path = E:/Program Files/Oracle/VirtualBox/VBoxManage.exe</span><br></pre></td></tr></table></figure><blockquote><p>修改好之后，再启动看看，报错提示我们没有cuckoo1这个虚拟机，找到virtualbox.conf，修改path的值为我电脑上的virtualbox的目录下的vboxmanage路径</p></blockquote><p>2020-06-21 11:04:12,516 [cuckoo] CRITICAL: CuckooCriticalError: Please update your configuration. Unable to shut ‘cuckoo1’ down or find the machine in its proper state: The virtual machine ‘cuckoo1’ doesn’t exist! Please create one or more Cuckoo analysis VMs and properly fill out the Cuckoo configuration!</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/14ab5166f5f1f8ae0445b0d055ed5394.png" alt="Windows布谷鸟" /></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- C:\Users\你的用户名\.cuckoo\conf\virtualbox.conf --&gt;</span></span><br><span class="line">[cuckoo1]</span><br><span class="line"># Specify the label name of the current machine as specified in your</span><br><span class="line"># VirtualBox configuration.</span><br><span class="line">label = XP_64</span><br></pre></td></tr></table></figure><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/e0644e7467bd45a247a46415b9d91721.png" alt="Windows布谷鸟" /></p><blockquote><p>修改好之后，再启动看看，报错提示还原虚拟机的快照失败，叫我给虚拟机搞个快照再说。所以，就给他整个快照噻~</p></blockquote><p>2020-06-21 11:11:57,365 [cuckoo.machinery.virtualbox] DEBUG: Stopping vm XP_64<br />2020-06-21 11:11:57,552 [cuckoo.machinery.virtualbox] DEBUG: Restoring virtual machine XP_64 to its current snapshot<br />2020-06-21 11:11:57,634 [cuckoo] CRITICAL: CuckooCriticalError: Error initializing machines: VBoxManage failed trying to restore the snapshot of machine ‘XP_64’ (this most likely means there is no snapshot, please refer to our documentation for more information on how to setup a snapshot for your VM): error code 1:</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/5b4d505985738c1d1e74c91e3c3bceb1.png" alt="Windows布谷鸟" /></p><p>所以，给它整了一个快照</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/4167243b791750b6243c9c7f6dcae333.png" alt="Windows布谷鸟" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/b66abbca83b982af8122aaf056796326.png" alt="Windows布谷鸟" /></p><blockquote><p>拍好快照之后，再启动看看，看着这个Waiting for analysis tasks. 老夫露出欣慰的笑容 (ಥ_ಥ)</p></blockquote><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/08fc798b4650cb77cec561ba11a55d0f.png" alt="Windows布谷鸟" /></p><h2 id="启动cuckoo-web界面"><a class="markdownIt-Anchor" href="#启动cuckoo-web界面"></a> 启动Cuckoo Web界面</h2><blockquote><p><strong>cuckoo web</strong><br />可以看到提示我们，需要配置MongoDB</p></blockquote><p>In order to use the Cuckoo Web Interface it is required to have MongoDB up-and-running and enabled in Cuckoo. Please refer to our official documentation as well as the $CWD/conf/reporting.conf file.</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/9bfac5c410419cc23a04fbf7634e5cdb.png" alt="Windows布谷鸟" /></p><h3 id="下载mongodb"><a class="markdownIt-Anchor" href="#下载mongodb"></a> 下载MongoDB</h3><p>先跑去下载一个MongoDB<br /><a href="https://www.mongodb.com/try/download/community">MongoDB下载地址</a></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/d07fb1af5c1a36156a621115ee6e4f51.png" alt="Windows布谷鸟" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/6d5c56358664b718b6e725343367c1fd.png" alt="Windows布谷鸟" /></p><p>安装好了就好了</p><h3 id="修改mongodb的配置文件"><a class="markdownIt-Anchor" href="#修改mongodb的配置文件"></a> 修改MongoDB的配置文件</h3><blockquote><p>找到配置MongoDB的文件，是reporting.conf，打开它，修改一下</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- C:\Users\你的用户名\.cuckoo\conf\reporting.conf --&gt;</span></span><br><span class="line">[mongodb]</span><br><span class="line">enabled = yes</span><br><span class="line">host = 127.0.0.1</span><br><span class="line">port = 27017</span><br></pre></td></tr></table></figure><h3 id="创建cuckoo链接"><a class="markdownIt-Anchor" href="#创建cuckoo链接"></a> 创建cuckoo链接</h3><p>改好了配置之后，MongoDB也在本地测试能使用之后</p><blockquote><p>cuckoo web 启动一波，给了我一个新的错误</p></blockquote><p>$ cuckoo web<br />C:\Python27\python.exe: can’t open file ‘C:\Python27\Scripts\cuckoo’: [Errno 2] No such file or directory</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/fce4e0320bc29ba65f0a65f7604f93a8.png" alt="Windows布谷鸟" /></p><p>为此，我用mklink将cuckoo链接过去，然后再跑一遍，就给了我一个这样子报错</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/bb5ad3b315799805089eda93cc402bf9.png" alt="Windows布谷鸟" /></p><p>没办法，只能去翻翻资料，发现挺多人都遇到这个问题的，GitHub上面挺多关于这个报错的issue，幸好都被close了</p><p>测试了两种方案，一钟mklink cuckoo.exe 一种mklink <a href="http://cuckoo-script.py">cuckoo-script.py</a></p><ul><li><p>mklink cuckoo.exe</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/d7ae15ba196b1c1927ea5943caf22100.png" alt="Windows布谷鸟" /></p></li><li><p><strong>mklink <a href="http://cuckoo-script.py">cuckoo-script.py</a></strong><br /><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/b73648c20da39c999a07112c9ca30a6f.png" alt="Windows布谷鸟" /></p></li></ul><p>可以看到mklink py文件的那个方案是正解</p><h2 id="访问cuckoo网站"><a class="markdownIt-Anchor" href="#访问cuckoo网站"></a> 访问Cuckoo网站</h2><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/880584a4f0b413f7872f9de853525a2e.png" alt="Windows布谷鸟" /></p><p>喜大普奔(ಥ_ಥ)<br />其实是可以看到是有点儿不正常的，这个先不管，后面再处理</p><h2 id="配置网卡大坑"><a class="markdownIt-Anchor" href="#配置网卡大坑"></a> 配置网卡（大坑）</h2><p>最开始，没了留意到装好了的XP系统居然没有网卡</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/01a9a052fa1b4e5aaf708d1c212cf08b.png" alt="Windows布谷鸟" /></p><p>设备管理器里面也显示网卡驱动有问题，一度导致我想下载一个万能驱动包给他装上<br />但是，太麻烦了那样子。毕竟VBox要是不支持XP的网卡的话，也太捞了吧。所以，自信认为问题出在VBOX身上。<br />接着去搞配置，看着这灰色的网卡选项，我一度很绝望。心想：改不了的嘛，什么情况，太辣鸡了吧。</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/f37b13fa3f231e5e6dbd57ffaeb55918.png" alt="Windows布谷鸟" /></p><p>然而发现是自己蠢了，虚拟机都没关，就挂起在那里，这让人家怎么改嘛。。。<br />所以，关掉虚拟机之后，就重新配置一下网卡</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/6f0a865de6fc17168181b4ad4838f865.png" alt="Windows布谷鸟" /></p><blockquote><p>选一个适合自己系统的，要是不知道哪个是系统支持的，可以像我这样，多开几个网卡，选多几个，到时应该总有一个能用的</p></blockquote><p>从新打开网卡设置页面看看</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/91705c7311a248f6257b7deba1f0de8e.png" alt="Windows布谷鸟" /></p><p>再ping一手，奈斯</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/6b2b6cd22e3941ad6d4396d65e8e2171.png" alt="Windows布谷鸟" /></p><h2 id="根据ip地址修改一下ip相关配置"><a class="markdownIt-Anchor" href="#根据ip地址修改一下ip相关配置"></a> 根据IP地址修改一下IP相关配置</h2><p>虚拟机网卡的问题修好之后，该配置cuckoo的配置文件了。稍微根据自己的虚拟机实际情况处理一下即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- C:\Users\你的用户名\.cuckoo\conf\virtulbox.conf --&gt;</span></span><br><span class="line"># Specify the IP address of the current virtual machine. Make sure that the</span><br><span class="line"># IP address is valid and that the host machine is able to reach it. If not,</span><br><span class="line"># the analysis will fail.</span><br><span class="line">ip = 192.168.1.232</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- C:\Users\你的用户名\.cuckoo\conf\cuckoo.conf --&gt;</span></span><br><span class="line">[resultserver]</span><br><span class="line"># The Result Server is used to receive in real time the behavioral logs</span><br><span class="line"># produced by the analyzer.</span><br><span class="line"># Specify the IP address of the host. The analysis machines should be able</span><br><span class="line"># to contact the host through such address, so make sure it&#x27;s valid.</span><br><span class="line"># NOTE: if you set resultserver IP to 0.0.0.0 you have to set the option</span><br><span class="line"># `resultserver_ip` for all your virtual machines in machinery configuration.</span><br><span class="line">ip = 192.168.1.166</span><br></pre></td></tr></table></figure><h2 id="配置客户机沙箱"><a class="markdownIt-Anchor" href="#配置客户机沙箱"></a> 配置客户机（沙箱）</h2><p>安装增强工具</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/480adf9ad07acf389213a268f7b8d51f.png" alt="Windows布谷鸟" /></p><p>重启一下虚拟机</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/d4bdfc801d2d2befd0615abee9153beb.png" alt="Windows布谷鸟" /></p><p>下载一个符合虚拟机版本的Python2安装包，扔进去，我这里是32位的Python27。</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/29a3bbe3879033ddee8e8accc27498e5.png" alt="Windows布谷鸟" /></p><p>然后，去<strong>C:\Users\你的名字.cuckoo\agent</strong>这个地方拉agent.py文件进去，双击运行</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/f28e79739d5224f7dc214d040c65cc8b.png" alt="Windows布谷鸟" /></p><blockquote><p><strong>建议在此处给它来个快照</strong></p></blockquote><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/82ef8c154bfd9774c7d70f2c15f7f571.png" alt="Windows布谷鸟" /></p><div class="note info flat"><p>如果出现拖曳文件进虚拟失败的问题，可以采用共享文件夹的方案</p></div><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/cf15ac245bb6a021f32b2ef9f69f9589.png" alt="Windows布谷鸟" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/b65fc62573b67e4bfb903bd283a17198.png" alt="Windows布谷鸟" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/84d9ece37947617f1f30b915599bdfb3.png" alt="Windows布谷鸟" /></p><h2 id="尝试修复cuckoo-web-的异常"><a class="markdownIt-Anchor" href="#尝试修复cuckoo-web-的异常"></a> 尝试修复cuckoo web 的异常</h2><p>cuckoo -d<br />cuckoo web</p><p>启动一下后台服务以及web服务</p><ul><li>注意，没有我下图截的那个红色框的 web启动界面都是不正常的启动。而且是看不到上传图标的</li></ul><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/1811a8778ecbc88a647ee0a2013141e0.png" alt="Windows布谷鸟" /><br />不正常</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/32ef1bbb2942970f4c0ca34e8bc67404.png" alt="Windows布谷鸟" /><br />正常</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/6117af4b036f65c98dfc112a8cacd47d.png" alt="Windows布谷鸟" /><br />注意红色框</p><blockquote><p>正常和不正常的区别咋一看不大，就差了一个上传的图标。实际上，不正常的话，是无法上传病毒样本的。<br />解决方案也比较玄学，这里随意说说。当时测试，发现有几个js文件会load失败，事关socket传输的问题。一系列尝试无果，然后便扔到服务器OSS中，在线load它。然而，还是测试不正常，一气之下，打尻去了。第二天过来重新启动便可以正常启动了。太神奇了~~~</p></blockquote><h2 id="配置tcpdump"><a class="markdownIt-Anchor" href="#配置tcpdump"></a> 配置tcpdump</h2><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/2c53a5839321e88597b36f80d1ef97a0.png" alt="Windows布谷鸟" /></p><p><a href="http://www.microolap.com/products/network/tcpdump/download/">点击下载 Microolap TCPDUMP for Windows</a><br />然后解压好，放tcpdump到.cuckoo目录下<br />修改配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[sniffer]</span><br><span class="line"># Enable or disable the use of an external sniffer (tcpdump) [yes/no].</span><br><span class="line">enabled = yes</span><br><span class="line"></span><br><span class="line"># Specify the path to your local installation of tcpdump. Make sure this</span><br><span class="line"># path is correct.</span><br><span class="line"># tcpdump = /usr/sbin/tcpdump</span><br><span class="line">tcpdump = C:/Users/Marx/.cuckoo/tcpdump.exe</span><br></pre></td></tr></table></figure><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/dbe6c1f710cd990aadfa60405f9bef39.png" alt="Windows布谷鸟" /></p><ul><li>不过在后期测试的时候，似乎不太正常，所以这个后期再处理下</li></ul><h2 id="上传病毒样本"><a class="markdownIt-Anchor" href="#上传病毒样本"></a> 上传病毒样本</h2><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/e295335e4efc4610e3eb59c62f204d3f.png" alt="Windows布谷鸟" /></p><p>选中了待分析的软件之后，分析它</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/4a5ee0e55599a77de2f74cf61d811618.png" alt="Windows布谷鸟" /></p><p>在cuckoo -d 的日志下，可以看到分析进展，是否正在正常运行分析</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/7634dc64960f9ce8620cdc57bcdd06b1.png" alt="Windows布谷鸟" /></p><p>在沙盒里面可以看到病毒运行的亚子</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/4fb7eaa2a4f392b5c3b69acdf2358bb3.png" alt="Windows布谷鸟" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/5f15c8c3418b8869b0813378833d22e1.png" alt="Windows布谷鸟" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/f452b3442cfd95fd9aeeb36e708a5956.png" alt="Windows布谷鸟" /></p><p>点击就可以看到报告了</p><h2 id="查看报告"><a class="markdownIt-Anchor" href="#查看报告"></a> 查看报告</h2><p>这是一个比较正常的软件的一个分析</p><ul><li><p>概要报告<br /><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/53fd1516887e1ac75337faa27fc77786.png" alt="Windows布谷鸟" /></p></li><li><p>静态分析<br /><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/acf2291b345a38cf043bcb6a646219ee.png" alt="Windows布谷鸟" /></p></li></ul><p>下面的是一个病毒的分析报告</p><ul><li><p>概要报告<br /><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/c65cfbfcf9b09a95aedee416fed59d7e.png" alt="Windows布谷鸟" /></p></li><li><p>行为分析<br /><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/b4470d008997a255b567204477a68583.png" alt="Windows布谷鸟" /></p></li><li><p>释放文件<br /><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/Windows%E5%B8%83%E8%B0%B7%E9%B8%9F/ac23335cae8d838eccc672cbdaa3b07c.png" alt="Windows布谷鸟" /></p></li></ul><h2 id="结语"><a class="markdownIt-Anchor" href="#结语"></a> 结语</h2><p>差不多啦，布谷鸟的部署，花了我两三个下午。虽说整体部署不是很复杂，遇到错误，fix掉配置的问题就可以了。然后总有玄学错误，让人无法排除。说明Cuckoo的稳定性和健壮性是有待提升的。但是问题不大，毕竟是能解决并正常使用的。就是怎么提高用户部署和使用体验的问题了。接着，Cuckoo的官网是没哟Windows下部署的说明文档的，希望能给看到的同学一些帮助，OK~ Easy~</p>]]></content>
    
    <summary type="html">
    
      布谷鸟沙箱-搭建虚拟机环境~多图杀猫警告
    
    </summary>
    
    
      <category term="信息安全" scheme="https://www.marxcbr.cn/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="沙盒" scheme="https://www.marxcbr.cn/tags/%E6%B2%99%E7%9B%92/"/>
    
  </entry>
  
  <entry>
    <title>布谷鸟沙箱-搭建虚拟机环境</title>
    <link href="https://www.marxcbr.cn/archives/aaaf4be5.html"/>
    <id>https://www.marxcbr.cn/archives/aaaf4be5.html</id>
    <published>2020-06-20T08:43:44.000Z</published>
    <updated>2020-12-23T13:48:32.321Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>布谷鸟的安装使用在一年前已经做过了，但是当时并未用文字记录下过程。而且当时为了节省我那可怜的内存，避免开两三个虚拟机而踩了一堆坑，在Windows上安装CuCkoo布谷鸟来实现沙箱检测。<br />当然，结果是喜人的</p><p>当时就想写文章来记录的，可是一拖就拖了一年了，时间真快啊。开始吧~</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/%E5%B8%83%E8%B0%B7%E9%B8%9F/2020-06-20-15-55-29_269f03cb.png" alt="2020-06-20-15-55-29" /></p><h2 id="安装virtualbox"><a class="markdownIt-Anchor" href="#安装virtualbox"></a> 安装VirtualBox</h2><p>到官网下载安装，<a href="https://www.virtualbox.org/wiki/Downloads">链接在此</a></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/%E5%B8%83%E8%B0%B7%E9%B8%9F/2020-06-19-22-09-07_338dcdb4.png" alt="2020-06-19-22-09-07" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/%E5%B8%83%E8%B0%B7%E9%B8%9F/2020-06-19-22-09-44_29324f11.png" alt="2020-06-19-22-09-44" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/%E5%B8%83%E8%B0%B7%E9%B8%9F/2020-06-19-22-13-57_839b0dfa.png" alt="2020-06-19-22-13-57" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/%E5%B8%83%E8%B0%B7%E9%B8%9F/2020-06-19-22-10-00_f6a7743d.png" alt="2020-06-19-22-10-00" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/%E5%B8%83%E8%B0%B7%E9%B8%9F/2020-06-19-22-31-32_55e912fe.png" alt="2020-06-19-22-31-32" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/%E5%B8%83%E8%B0%B7%E9%B8%9F/2020-06-20-10-36-32_5f885bb9.png" alt="2020-06-20-10-36-32" /></p><h2 id="安装xp系统"><a class="markdownIt-Anchor" href="#安装xp系统"></a> 安装XP系统</h2><p>Windows XP SP3 忘了在哪里下载的了，文件名是 en_windows_xp_professional_sp3_Nov_2013_Incl_SATA_Drivers.iso<br />这个倒是很简单就可以找到，下载回来</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/%E5%B8%83%E8%B0%B7%E9%B8%9F/2020-06-20-16-03-56_1274f7a2.png" alt="布谷鸟" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/%E5%B8%83%E8%B0%B7%E9%B8%9F/2020-06-20-16-04-27_5945c420.png" alt="布谷鸟" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/%E5%B8%83%E8%B0%B7%E9%B8%9F/2020-06-20-16-05-05_474b9be3.png" alt="布谷鸟" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/%E5%B8%83%E8%B0%B7%E9%B8%9F/2020-06-20-16-05-22_45a91c0f.png" alt="布谷鸟" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/%E5%B8%83%E8%B0%B7%E9%B8%9F/2020-06-20-16-07-49_048d4dd5.png" alt="布谷鸟" /></p><blockquote><p>选中自己的系统镜像</p></blockquote><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/%E5%B8%83%E8%B0%B7%E9%B8%9F/2020-06-20-16-08-26_9716d58a.png" alt="布谷鸟" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/%E5%B8%83%E8%B0%B7%E9%B8%9F/2020-06-20-16-08-59_1903012d.png" alt="布谷鸟" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/%E5%B8%83%E8%B0%B7%E9%B8%9F/2020-06-20-16-10-08_b2566ad6.png" alt="布谷鸟" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/%E5%B8%83%E8%B0%B7%E9%B8%9F/2020-06-20-16-10-34_1eed15a3.png" alt="布谷鸟" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/%E5%B8%83%E8%B0%B7%E9%B8%9F/2020-06-20-16-11-52_3f0746b6.png" alt="布谷鸟" /></p><blockquote><p>复制文件这步，大概跑了50秒，就搞定了，骄傲一下下</p></blockquote><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/%E5%B8%83%E8%B0%B7%E9%B8%9F/2020-06-20-16-12-27_5d79d424.png" alt="布谷鸟" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/%E5%B8%83%E8%B0%B7%E9%B8%9F/2020-06-20-16-14-52_b1597933.png" alt="布谷鸟" /></p><p>next一下</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/%E5%B8%83%E8%B0%B7%E9%B8%9F/2020-06-20-16-15-38_cf1f6779.png" alt="布谷鸟" /></p><p>输一下管理员密码</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/%E5%B8%83%E8%B0%B7%E9%B8%9F/2020-06-20-16-16-26_212390f1.png" alt="布谷鸟" /></p><p>设时间为Beijing时间</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/%E5%B8%83%E8%B0%B7%E9%B8%9F/2020-06-20-16-25-58_1da28af1.png" alt="布谷鸟" /></p><blockquote><p>记得移除掉光驱镜像，否则会进入安装界面</p></blockquote><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/%E5%B8%83%E8%B0%B7%E9%B8%9F/2020-06-20-16-22-25_119c3881.png" alt="布谷鸟" /></p><p>反正做沙箱的，不开防火墙了</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/%E5%B8%83%E8%B0%B7%E9%B8%9F/2020-06-20-16-24-34_dff50bcc.png" alt="布谷鸟" /></p><p>设置用户名，marxtina</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/%E5%B8%83%E8%B0%B7%E9%B8%9F/2020-06-20-16-25-01_ea98d7dc.png" alt="布谷鸟" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/HEXO/%E5%B8%83%E8%B0%B7%E9%B8%9F/2020-06-20-16-25-30_4f289297.png" alt="布谷鸟" /></p><blockquote><p>我的蓝天白云</p></blockquote><blockquote><p><strong>虚拟机环境的搭建先到这里吧，图太多了，放同一篇文章，显得不是很好，布谷鸟的坑，留到下一篇里面去</strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      布谷鸟沙箱-搭建虚拟机环境~多图杀猫警告
    
    </summary>
    
    
      <category term="信息安全" scheme="https://www.marxcbr.cn/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="虚拟机" scheme="https://www.marxcbr.cn/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
      <category term="沙盒" scheme="https://www.marxcbr.cn/tags/%E6%B2%99%E7%9B%92/"/>
    
  </entry>
  
  <entry>
    <title>Filco Majesstouch2 键盘蓝牙连接方法</title>
    <link href="https://www.marxcbr.cn/archives/3927d88e.html"/>
    <id>https://www.marxcbr.cn/archives/3927d88e.html</id>
    <published>2020-06-15T07:53:10.000Z</published>
    <updated>2020-12-23T13:48:32.314Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>昨天晚上，键盘突然就连不上电脑了，然后折腾了一会儿才重新连接回电脑<br />所以小小的记录一下，FILCO Majesstouch2 蓝牙连接方法，免得后面连不上的时候，又得去网上搜或者看说明书了，打开自己的博客就可以看到了。<br /><img src="http://marxcbr.oss-cn-shenzhen.aliyuncs.com/static%5C960ce425bf714c1fb10aade85197467f.png" alt="20200615180547" /><br /><img src="http://marxcbr.oss-cn-shenzhen.aliyuncs.com/e581ccaa3b62697ed22bbaa6f6843c96.png" alt="20200615180653" /></p><p><img src="http://marxcbr.oss-cn-shenzhen.aliyuncs.com/static%5Ce581ccaa3b62697ed22bbaa6f6843c96.png" alt="20200615180812" /></p><p><img src="http://marxcbr.oss-cn-shenzhen.aliyuncs.com/static%5Ce17a13d5a9ef486a13b28445421b8473.png" alt="20200615181456" /></p><p><img src="http://marxcbr.oss-cn-shenzhen.aliyuncs.com/static%5Cae1b30013925e16cb3a219f7e6b1bee4.png" alt="20200615181617" /></p><h2 id="连接方法"><a class="markdownIt-Anchor" href="#连接方法"></a> 连接方法</h2><blockquote><ul><li>按住 Ctrl Alt Fn 这仨键，大概按个10秒吧，松开手，会看到指示灯亮起来</li></ul></blockquote><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-6-15/Blog/1592208669677.png" alt="Filco Majesstouch2 键盘蓝牙连接方法" /></p><blockquote><ul><li>在1到4的数字键上选择记录号 ① - ④ 中的任何一个，会看到右边的指示灯闪起来</li><li>打开电脑的蓝牙设备管理器，点击添加蓝牙设备</li></ul></blockquote><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-6-15/Blog/1592208826120.png" alt="Filco Majesstouch2 键盘蓝牙连接方法" /></p><blockquote><ul><li>搜索到键盘之后，点击连接</li></ul></blockquote><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-6-14/Blog/1592141573908.png" alt="Filco Majesstouch2 键盘蓝牙连接方法" /></p><blockquote><ul><li>在键盘上输入显示的数字，我这里是06417267，最后输完一定要<strong>回车一下，记得回车，记得回车！</strong></li></ul></blockquote><blockquote><ul><li>确定后，会出现匹配成功的窗口</li></ul></blockquote><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-6-14/Blog/1592141605842.png" alt="Filco Majesstouch2 键盘蓝牙连接方法" /></p><p>然后就可以使用键盘了<br />OK~EZ~ 打完收工</p><h2 id="晒图一下"><a class="markdownIt-Anchor" href="#晒图一下"></a> 晒图一下</h2><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-6-15/Blog/HR-%E9%94%AE%E7%9B%98.webp" alt="Filco Majesstouch2 键盘蓝牙连接方法" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-6-15/Blog/%E4%BE%A7%E6%8B%8D_%E7%9C%8B%E5%9B%BE%E7%8E%8B.webp" alt="Filco Majesstouch2 键盘蓝牙连接方法" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-6-15/Blog/%E9%94%AE%E7%9B%98%E5%B7%A6%E4%BE%A7_%E7%9C%8B%E5%9B%BE%E7%8E%8B.webp" alt="Filco Majesstouch2 键盘蓝牙连接方法" /></p>]]></content>
    
    <summary type="html">
    
      Filco Majesstouch2 键盘蓝牙连接方法
    
    </summary>
    
    
      <category term="小日志" scheme="https://www.marxcbr.cn/categories/%E5%B0%8F%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="键盘" scheme="https://www.marxcbr.cn/tags/%E9%94%AE%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>C++加密GPT|MBR分区表实现简单磁盘加密</title>
    <link href="https://www.marxcbr.cn/archives/f24f7c58.html"/>
    <id>https://www.marxcbr.cn/archives/f24f7c58.html</id>
    <published>2020-05-06T03:57:00.000Z</published>
    <updated>2020-12-23T13:48:32.314Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>最近都在搞移动存储介质的一些相关的东西。恰好，就有个磁盘加密的需求。这个需求是不是真的需要，我其实都不太清楚，哈哈哈。只不过是恰好想到了，然后就做了。因为想到了这个东西，但是不做出来，感觉不舒服~所以，花了一两天的时间去查阅相关资料，把它给整出来了。利用国密算法SM4对分区表进行一个加解密，实现加密后的磁盘怼到电脑上无法正常使用（其实是可以看到磁盘的，只不过打开不了而已）。</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-5-6/BogImages/1588741146022.png" alt="C++加密GPT|MBR分区表实现简单磁盘加密" /><br />这是GPT格式的效果</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-5-6/BogImages/1588742155892.png" alt="C++加密GPT|MBR分区表实现简单磁盘加密" /><br />这是MBR格式的效果</p><p>都是用不了，只显示插入了一个存储介质</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-5-6/BogImages/1588742219330.png" alt="" /><br />存储管理器里面显示未分配空间</p><h2 id="先简单研究一下下mbr和gpt的区别"><a class="markdownIt-Anchor" href="#先简单研究一下下mbr和gpt的区别"></a> 先简单研究一下下MBR和GPT的区别</h2><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-5-6/BogImages/1588763044501.png" alt="C++加密GPT|MBR分区表实现简单磁盘加密" /><br />MBR结构</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-5-6/BogImages/1588763122842.png" alt="C++加密GPT|MBR分区表实现简单磁盘加密" /><br />GPT结构</p><blockquote><p>MBR分区表与GPT分区表的关系<br />与支持最大卷为2 TB（Terabytes）并且每个磁盘最多有4个主分区（或3个主分区，1个扩展分区和无限制的逻辑驱动器）的MBR磁盘分区的样式相比，GPT磁盘分区样式支持最大为128个分割，一个分割最大18 EB（Exabytes），只受到操作系统限制（由于分区表本身需要占用一定空间，最初规划硬盘分区时，留给分区表的空间决定了最多可以有多少个分区，IA-64版Windows限制最多有128个分区，这也是EFI标准规定的分区表的最小尺寸）。与MBR分区的磁盘不同，至关重要的平台操作数据位于分区，而不是位于非分区或隐藏扇区。另外，GPT分区磁盘有备份分区表来提高分区数据结构的完整性。在UEFI系统上，通常是通过ESP分区中的EFI应用程序文件引导GPT硬盘上的操作系统，而不是活动主分区上的引导程序。<br /><strong>资料来源</strong>：</p><ul><li>维基百科 <a href="https://zh.wikipedia.org/wiki/%E4%B8%BB%E5%BC%95%E5%AF%BC%E8%AE%B0%E5%BD%95">https://zh.wikipedia.org/wiki/主引导记录</a></li><li>维基百科 <a href="https://zh.wikipedia.org/wiki/GUID%E7%A3%81%E7%A2%9F%E5%88%86%E5%89%B2%E8%A1%A8">https://zh.wikipedia.org/wiki/GUID磁碟分割表</a></li></ul></blockquote><p>总结来说，就是<strong>MBR支持4个主要分区，GPT支持128个</strong>。然后MBR中的分区表是写在第0个扇区，偏移在0x1BE上面的，一共4项，每项16个字节。GPT则在第2个扇区开始写，一共可以划分为128个分区，从偏移0x00就开始写，每项占用128个字节，即以0x80的距离进行偏移记录。然后按照常规512字节一共扇区计算的话，128个项就是占有32个扇区。</p><h2 id="使用sm4国密对称加密算法对分区表进行加密"><a class="markdownIt-Anchor" href="#使用sm4国密对称加密算法对分区表进行加密"></a> 使用SM4国密对称加密算法对分区表进行加密</h2><p>加密分区表可以有很多钟办法，采用对称、非对称加密、还是简单的异或值、左移右移来搞凯撒密码都可以。只要你喜欢的都可以<br />在这里，我会采用国密算法SM4进行一个加密操作。SM4的实现不是我写的，是从Github上面搞回来的，具体作者是谁，我并没有记录到，当时拿过来就用了，没有记录到作者，实在不好意思~</p><p>该怎么加密，加密之后的数据该放哪个位置。<br />在这里，采用的最简单的一个做法，不免显得有些蠢~<br />对于MBR分区则对上文中说到的64个字节的四个分区项加密，然后存放在36号扇区。<br />对于GPT分区，则对上文说到的 2——33 扇区进行加密，然后存在36号扇区起的连续32个扇区</p><p>接着<strong>对上面说到的那些原始分区表存的数据全部清零</strong>。对于GPT的话，还得在第一个扇区读取LBA备份的扇区位置，对备份扇区内的分区表项也给一同抹去才可以生效。因为当检测到主分区表不正常时，会自动读取备份分区表。</p><h2 id="解密分区表的办法"><a class="markdownIt-Anchor" href="#解密分区表的办法"></a> 解密分区表的办法</h2><p>由于磁盘被加密之后，系统就看到没有分区表了。那就会影响使用了，咱们就要将加密后的数据读取回来，读取位置如上文所说，利用SM4进行解密之后，然后再填回原来分区表的地方。约莫几秒中，系统便会识别出正常的分区表，资源管理器便可以正常使用该分区了。</p><h2 id="怎么让分区表一直处于加密状态中呢"><a class="markdownIt-Anchor" href="#怎么让分区表一直处于加密状态中呢"></a> 怎么让分区表一直处于加密状态中呢</h2><p>但是，想象一下，要是加密磁盘怼入计算机中，然后给他解密了分区表之后，突然拔出来了。会发生什么呢？<br />没错，是原来的分区表会保留住。下次他就可以拿着被解锁的磁盘随便用了。<br />所以，在这里，我们可以在插入磁盘，解密分区表之后，约莫等他几秒，让系统识别出来分区表之后，存在缓存之后，马上又给它给加密了。这样子他在后面使用的时候，突然拔出来，分区表也是加密好了的。</p><h2 id="密钥的生成存放方法"><a class="markdownIt-Anchor" href="#密钥的生成存放方法"></a> 密钥的生成存放方法</h2><p>SM4的密钥是128位的，即32个字符。我们可以怎么搞出这128位密钥呢</p><ul><li>随机的生成这个密钥，然后存在某个扇区中</li><li>利用用户输入来实现这个密钥输入</li><li>利用某种东西来派生出这个128位的密钥，例如利用移动存储介质的序列号（采用PID+VID+SerialNumber）来进行一个MD5运算，生成一个128位的消息摘要，利用这个MD5值进行一个加密。</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mi>e</mi><mi>y</mi><mo>=</mo><mi>H</mi><mo stretchy="false">(</mo><mi>P</mi><mi>I</mi><mi>D</mi><mo>+</mo><mi>V</mi><mi>I</mi><mi>D</mi><mo>+</mo><mi>S</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>a</mi><mi>l</mi><mi>N</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Key=H(PID+VID+SerialNumber)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">b</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span></span></span></span></span></p><p>这里，我这里采用，第三种办法，毕竟128位的密钥着实不好记的对吧，利用国密算法SM3来生成256位的密钥。然后截取前128位作为密钥，存在某个扇区中，需要时再读取即可。</p><h3 id="小小的做一下安全分析"><a class="markdownIt-Anchor" href="#小小的做一下安全分析"></a> 小小的做一下安全分析</h3><p>利用 PID+VID+SerialNumber 来生成生成标识符来进行SM3消息摘要是真的安全了吗？并不是，假设我们的加密解密方法被发现了之后，别人还是可以很简单的就写出一个SM3来生成需要用到的消息摘要，用作SM4密钥。<br />所以，为了避免这个情况，我向服务器请求一个由服务器发送回来的秘密值，这秘密值可以是128位的，也可以1024位，也可以2048位，随意我们来进行生成。当别人想自己生成摘要时，这个秘密值就是他所不知道的，毕竟秘密值长度未知，知道长度也“无从下手”，够他愁了~</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mi>e</mi><mi>y</mi><mo>=</mo><mi>H</mi><mo stretchy="false">(</mo><mi>P</mi><mi>I</mi><mi>D</mi><mo>+</mo><mi>V</mi><mi>I</mi><mi>D</mi><mo>+</mo><mi>S</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>a</mi><mi>l</mi><mi>N</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mo>+</mo><mi>S</mi><mi>e</mi><mi>c</mi><mi>r</mi><mi>e</mi><mi>t</mi><mi>V</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Key=H(PID+VID+SerialNumber+SecretValue)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">b</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">u</span><span class="mord mathdefault">e</span><span class="mclose">)</span></span></span></span></span></p><h2 id="补充说明"><a class="markdownIt-Anchor" href="#补充说明"></a> 补充说明</h2><p>这个移动存储加密方案并不是理想中这么安全的。毕竟，真正的数据区域并没有被加密到。我们只是对分区表进行了一个操作。在加密后，对分区表进行一个清空操作。数据区域，还是明文的情况，如果有心去读取数据的话，可以利用diskgenius、easy recovery 这类软件进行一个数据恢复，进行提取。</p><p>因为全盘全分区加密是需要耗费大量时间的，这次用到这种方案只是适用于我当前的需求，各位大哥参考一下即可</p><p>代码有几百行，着实不好在博客中展示。就由GitHub这些专业的代码托管平台来展示吧，哈哈哈<br />项目的GitHub的位置： <a href="https://github.com/97CBR/tmp_project_in_vs2017">tmp_project_in_vs2017</a> 的 encrypted_disk_partition 分支中</p><center>要是感觉不错的话，就留个言评论一下下呀，欢迎各位大哥指正</center>]]></content>
    
    <summary type="html">
    
      C++加密GPT|MBR分区表实现简单磁盘加密
    
    </summary>
    
    
      <category term="C++" scheme="https://www.marxcbr.cn/categories/C/"/>
    
    
      <category term="C++" scheme="https://www.marxcbr.cn/tags/C/"/>
    
      <category term="分区表加密" scheme="https://www.marxcbr.cn/tags/%E5%88%86%E5%8C%BA%E8%A1%A8%E5%8A%A0%E5%AF%86/"/>
    
      <category term="国密算法" scheme="https://www.marxcbr.cn/tags/%E5%9B%BD%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>GitHub这波操作 爱了爱了</title>
    <link href="https://www.marxcbr.cn/archives/b4eeef0.html"/>
    <id>https://www.marxcbr.cn/archives/b4eeef0.html</id>
    <published>2020-04-17T16:34:38.000Z</published>
    <updated>2021-11-15T14:38:29.658Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="有个有钱的爸爸就是可以为所欲为"><a class="markdownIt-Anchor" href="#有个有钱的爸爸就是可以为所欲为"></a> 有个有钱的爸爸就是可以为所欲为</h2><p>GitHub 在 4月14号晚上九点半左右的时候，突然一封邮件发到我的邮箱里<br />邮件内容长这样</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-18/BogImages/1587141395107.png" alt="MarxCBR的小屋" /></p><ul><li><strong>大概就是开放了私有仓库的协同人的人数限制</strong></li><li><strong>GitHub Action 的时间有2000分钟每个月</strong></li><li><strong>降低某些服务的费用</strong></li></ul><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-18/BogImages/1587141930946.png" alt="MarxCBR的小屋" /></p><p><strong>隔壁家Gitee的长这样子，害限制5个人呢，毕竟要恰饭的嘛</strong></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-18/BogImages/1587142117145.png" alt="MarxCBR的小屋" /></p><p>之前开放私有仓库的时候，就已经感觉到了巨硬的力量<br />现在开放了无限私有仓，怕是会让Gitee感受到压力哦~</p>]]></content>
    
    <summary type="html">
    
      GitHub这波操作，
    
    </summary>
    
    
      <category term="小日志" scheme="https://www.marxcbr.cn/categories/%E5%B0%8F%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="小日志" scheme="https://www.marxcbr.cn/tags/%E5%B0%8F%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>VMWare 安装Ubuntu18.04-Live-Server记录</title>
    <link href="https://www.marxcbr.cn/archives/9c1fd75a.html"/>
    <id>https://www.marxcbr.cn/archives/9c1fd75a.html</id>
    <published>2020-04-10T07:07:22.000Z</published>
    <updated>2020-12-23T13:48:32.317Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p><strong>我们该如何根据需求来确定我们需要装的系统呢</strong><br />那就当然是按照需求来呀，比如我们并不需要界面的Linux，就可以装今天的主角，Ubuntu18.04-Live-Server。当然如果我们需要界面的话，就装带界面的发行版。如果我们打算装系统来做渗透，那么kali欢迎你。</p><p>这里我需要装一个Ubuntu来部署一个蜜罐系统，嘿嘿，不用界面就好。所以，选择了这个server版本，那我为啥不用docker呢？哈哈哈</p><h2 id="将镜像下载回来"><a class="markdownIt-Anchor" href="#将镜像下载回来"></a> 将镜像下载回来</h2><p>这里我们去清华镜像站下载，下载比较快点 <a href="https://mirrors.tuna.tsinghua.edu.cn/">点击进入</a></p><p>选择发行版</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-10/BogImages/1586493199109.png" alt="MarxCBR的小屋" /></p><p>我要18.04的</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-10/BogImages/1586493186710.png" alt="MarxCBR的小屋" /></p><p>用种子或者直接iso镜像都行</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-10/BogImages/1586493169488.png" alt="MarxCBR的小屋" /></p><h2 id="在虚拟机里面安装"><a class="markdownIt-Anchor" href="#在虚拟机里面安装"></a> 在虚拟机里面安装</h2><p><strong>这部分可以参考以前装kali的记录</strong><br />创建新的虚拟机</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-10/BogImages/1586494359575.png" alt="MarxCBR的小屋" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-10/BogImages/1586494381222.png" alt="MarxCBR的小屋" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-10/BogImages/1586494452916.png" alt="MarxCBR的小屋" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-10/BogImages/1586494592865.png" alt="MarxCBR的小屋" /></p><h2 id="启动虚拟机进行镜像安装"><a class="markdownIt-Anchor" href="#启动虚拟机进行镜像安装"></a> 启动虚拟机进行镜像安装</h2><p>这里要等一两分钟<br /><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-10/BogImages/1586494682620.png" alt="MarxCBR的小屋" /></p><p>英文就好<br /><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-10/BogImages/1586494756765.png" alt="MarxCBR的小屋" /></p><p>不要升级<br /><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-10/BogImages/1586494783386.png" alt="MarxCBR的小屋" /></p><p>美式键盘布局<br /><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-10/BogImages/1586494837988.png" alt="MarxCBR的小屋" /></p><p>设置网络<br /><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-10/BogImages/1586494847221.png" alt="MarxCBR的小屋" /></p><p>不设置代理，这个随意自己<br /><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-10/BogImages/1586494873500.png" alt="MarxCBR的小屋" /></p><p>改成阿里源，下载快N倍<br /><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-10/BogImages/1586494994282.png" alt="MarxCBR的小屋" /></p><p><a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a></p><p>用整个虚拟磁盘<br /><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-10/BogImages/1586495066864.png" alt="MarxCBR的小屋" /></p><p>默认磁盘<br /><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-10/BogImages/1586495078192.png" alt="MarxCBR的小屋" /></p><p>分区，，默认<br /><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-10/BogImages/1586495159902.png" alt="MarxCBR的小屋" /></p><p>提示要格式化，继续就好<br /><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-10/BogImages/1586495171283.png" alt="MarxCBR的小屋" /></p><p>设置我们主机的名字<br /><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-10/BogImages/1586495367233.png" alt="MarxCBR的小屋" /><br />ps：wkssd是啥意思呢，有兴趣可以猜猜</p><p>这里要用空格<strong>确定勾上安装openssh server</strong>方便后续进行ssh连接<br /><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-10/BogImages/1586495351706.png" alt="MarxCBR的小屋" /></p><p>要是没有自己要用的软件，就直接选择done安装吧<br /><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-10/BogImages/1586495470980.png" alt="MarxCBR的小屋" /></p><p>正在安装的亚子<br /><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-10/BogImages/1586495494986.png" alt="MarxCBR的小屋" /></p><p>安装完会给这个提示，并不会自动重启<br /><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-10/BogImages/1586495707011.png" alt="MarxCBR的小屋" /></p><p>装完之后，选择reboot会起不来。提示我们要将安装媒介移除，我们要将之前选的ISO镜像去了，选择DVD为自动检测<br /><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-10/BogImages/1586495854660.png" alt="MarxCBR的小屋" /></p><p>进入登录界面<br /><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-10/BogImages/1586495890490.png" alt="MarxCBR的小屋" /></p><p>前面可能会连续都登不进去，我瞅了一下回显<br />感觉是生成秘钥什么的<br />试了两三次之后，就可以正常登录了<br /><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-10/BogImages/1586495982450.png" alt="MarxCBR的小屋" /></p><p>OK，差不多就在这样子，简单的记录一下装这个Ubuntu-live-server~嘿嘿</p><center>要是感觉不错的话，就留个言评论一下下呀，欢迎各位大哥指正</center>]]></content>
    
    <summary type="html">
    
      VMWare 安装Ubuntu18.04-Live-Server记录
    
    </summary>
    
    
      <category term="虚拟机" scheme="https://www.marxcbr.cn/categories/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="VMWare" scheme="https://www.marxcbr.cn/tags/VMWare/"/>
    
      <category term="Ubuntu" scheme="https://www.marxcbr.cn/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>利用C++真正的弹出U盘</title>
    <link href="https://www.marxcbr.cn/archives/7fc2b650.html"/>
    <id>https://www.marxcbr.cn/archives/7fc2b650.html</id>
    <published>2020-04-09T13:26:08.000Z</published>
    <updated>2020-12-23T13:48:32.320Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>为啥我要用C++来弹出我的U盘呢~<br />还是我那让人可爱的毕设里面的一个朴素无华的需求<br />在那个场景里面，我将U盘插进去，然后对其MBR分区写入一个特定的标签后，再从那个特定的位置读取数据进行验证是否已经将标签写入。<br />完成了这件事之后，我就需要将U盘进行弹出，以便于后续的U盘插入并进行打标签流程</p><h2 id="c-弹出u盘有两个方案"><a class="markdownIt-Anchor" href="#c-弹出u盘有两个方案"></a> C++ 弹出U盘有两个方案</h2><p>本来我不知道U盘弹出有两个方案的，查阅资料和MSDN，最容易看到，也最常见的就是利用 <strong>CreateFile</strong> 打开设备的句柄，利用 <strong>DeviceIoControl</strong> 来对设备句柄执行 <strong>IOCTL_STORAGE_EJECT_MEDIA</strong> 这个操作码</p><p>当然前提是你句柄获取都是正确的，然后利用 FSCTL_LOCK_VOLUME、FSCTL_DISMOUNT_VOLUME、IOCTL_STORAGE_MEDIA_REMOVAL 这些操作码来排除其他进程的干扰和锁定U盘</p><p>可是这样子，居然弹出来的设备会变成这样子</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-9/BogImages/1586439632184.png" alt="MarxCBR的小屋" /></p><p>你管这叫弹出？这不是我以前认识的弹出~</p><p>虽然也打开不了磁盘了，提示叫我插入磁盘</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-9/BogImages/1586439737115.png" alt="MarxCBR的小屋" /></p><p>但是你这样子在设备管理器里面也还是可见的，即使使用不了，我利用 <strong>GetLogicalDrives</strong> <strong>CreateFileA</strong> <strong>DeviceIoControl</strong> 这仨函数还是可以将你枚举出来就木得意思了，对吧。</p><p>接着，我可爱的火绒给了我灵感</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-9/BogImages/1586440096994.png" alt="MarxCBR的小屋" /></p><p>弹出前<br /><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-9/BogImages/1586440108669.png" alt="MarxCBR的小屋" /></p><p>弹出后<br /><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-9/BogImages/1586440131724.png" alt="MarxCBR的小屋" /></p><p>这才是我想要的效果啊，喵的。用<strong>IOCTL_STORAGE_EJECT_MEDIA</strong>弹出之后还剩一个图标给我一点也不帅好吧<br /><strong>以下提供到的方案均已测试通过，实现效果如上文说过一致，按需求自取</strong></p><h2 id="第一种解决方案会剩一个无法访问到的盘符"><a class="markdownIt-Anchor" href="#第一种解决方案会剩一个无法访问到的盘符"></a> 第一种解决方案，会剩一个无法访问到的盘符</h2><p>解决方案这种东西，还是直接上代码说的更清楚，都是写代码的人嘛。<br />用代码说清楚它</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * \brief 弹出指定盘符存储设备</span></span><br><span class="line"><span class="comment"> * \param drive_volume_name 盘符，E，F</span></span><br><span class="line"><span class="comment"> * \return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">BOOL <span class="title">UsbDrivesManager::RemoveUsbByName</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> drive_volume_name)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    QString paths = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">auto</span> drive_name = QString(<span class="string">&quot;%1:&quot;</span>).arg(drive_volume_name);</span><br><span class="line">    paths = QString(<span class="string">R&quot;(\\.\%1:)&quot;</span>).arg(drive_volume_name);</span><br><span class="line">    DWORD dw_ret;</span><br><span class="line">    DWORD dw_error;</span><br><span class="line">    WCHAR cs_volume[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    paths.toWCharArray(cs_volume);</span><br><span class="line">    <span class="comment">//打开设备</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">auto</span> h_device = CreateFile(cs_volume,</span><br><span class="line">                                     GENERIC_READ | GENERIC_WRITE,</span><br><span class="line">                                     FILE_SHARE_READ | FILE_SHARE_WRITE,</span><br><span class="line">                                     <span class="literal">NULL</span>,</span><br><span class="line">                                     OPEN_EXISTING,</span><br><span class="line">                                     <span class="number">0</span>,</span><br><span class="line">                                     <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (h_device == INVALID_HANDLE_VALUE) &#123;</span><br><span class="line">        <span class="comment">// can&#x27;t open the drive</span></span><br><span class="line">        dw_error = GetLastError();</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!DeviceIoControl(h_device, FSCTL_LOCK_VOLUME, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, &amp;dw_ret, <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!DeviceIoControl(h_device, FSCTL_DISMOUNT_VOLUME, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, &amp;dw_ret, <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">    PREVENT_MEDIA_REMOVAL pmr_buffer;</span><br><span class="line">    pmr_buffer.PreventMediaRemoval = FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!DeviceIoControl(h_device, IOCTL_STORAGE_MEDIA_REMOVAL, &amp;pmr_buffer, <span class="keyword">sizeof</span>(PREVENT_MEDIA_REMOVAL), <span class="literal">NULL</span>, <span class="number">0</span>, &amp;dw_ret, <span class="literal">NULL</span>))</span><br><span class="line">        qDebug(<span class="string">&quot;DeviceIoControl IOCTL_STORAGE_MEDIA_REMOVAL failed:%d\n&quot;</span>, GetLastError());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> b_result = DeviceIoControl(</span><br><span class="line">                        h_device,</span><br><span class="line">                        IOCTL_STORAGE_EJECT_MEDIA, <span class="comment">//eject USB</span></span><br><span class="line">                        <span class="literal">NULL</span>,</span><br><span class="line">                        <span class="number">0</span>,</span><br><span class="line">                        <span class="literal">NULL</span>,</span><br><span class="line">                        <span class="number">0</span>,</span><br><span class="line">                        &amp;dw_ret,</span><br><span class="line">                        <span class="keyword">static_cast</span>&lt;LPOVERLAPPED&gt;(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="keyword">if</span> (!b_result) &#123;</span><br><span class="line">        dw_error = GetLastError();</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    b_result = CloseHandle(h_device);</span><br><span class="line">    <span class="keyword">if</span> (!b_result) &#123;</span><br><span class="line">        dw_error = GetLastError();</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info flat"><p>这段代码用到了 Qt 的QString和Qdebug的库，实际使用时，可以根据需求自己稍微加以更改</p></div><h2 id="弹出u盘不会留下盘符图标"><a class="markdownIt-Anchor" href="#弹出u盘不会留下盘符图标"></a> 弹出U盘，不会留下盘符图标</h2><p>还是直接放代码吧</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">DEVINST <span class="title">UsbDrivesManager::GetDrivesDevInstByDiskNumber</span><span class="params">(<span class="keyword">const</span> <span class="keyword">long</span> disk_number)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">auto</span> h_dev_info = SetupDiGetClassDevs(&amp;GUID_DEVINTERFACE_DISK, <span class="literal">NULL</span>, <span class="literal">NULL</span>,</span><br><span class="line">                                              DIGCF_PRESENT | DIGCF_DEVICEINTERFACE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (h_dev_info == INVALID_HANDLE_VALUE)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    DWORD dw_index = <span class="number">0</span>;</span><br><span class="line">    SP_DEVICE_INTERFACE_DATA dev_interface_data = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    dev_interface_data.cbSize = <span class="keyword">sizeof</span>(SP_DEVICE_INTERFACE_DATA);</span><br><span class="line">    <span class="keyword">auto</span> b_ret = FALSE;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    SP_DEVICE_INTERFACE_DATA sp_did;</span><br><span class="line">    SP_DEVINFO_DATA sp_dd;</span><br><span class="line">    DWORD dw_size;</span><br><span class="line"></span><br><span class="line">    sp_did.cbSize = <span class="keyword">sizeof</span>(sp_did);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        b_ret = SetupDiEnumDeviceInterfaces(h_dev_info, <span class="literal">NULL</span>, &amp;GUID_DEVINTERFACE_DISK, dw_index,</span><br><span class="line">                                            &amp;dev_interface_data);</span><br><span class="line">        <span class="keyword">if</span> (!b_ret)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        SetupDiEnumInterfaceDevice(h_dev_info, <span class="literal">NULL</span>, &amp;GUID_DEVINTERFACE_DISK, dw_index, &amp;sp_did);</span><br><span class="line"></span><br><span class="line">        dw_size = <span class="number">0</span>;</span><br><span class="line">        SetupDiGetDeviceInterfaceDetail(h_dev_info, &amp;sp_did, <span class="literal">NULL</span>, <span class="number">0</span>, &amp;dw_size, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dw_size) &#123;</span><br><span class="line">            <span class="keyword">auto</span> psp_did = <span class="keyword">static_cast</span>&lt;PSP_DEVICE_INTERFACE_DETAIL_DATA&gt;(HeapAlloc(</span><br><span class="line">                               GetProcessHeap(), HEAP_ZERO_MEMORY, dw_size));</span><br><span class="line">            <span class="keyword">if</span> (psp_did == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>; <span class="comment">// autsch</span></span><br><span class="line">            &#125;</span><br><span class="line">            psp_did-&gt;cbSize = <span class="keyword">sizeof</span>(*psp_did);</span><br><span class="line">            ZeroMemory(<span class="keyword">static_cast</span>&lt;PVOID&gt;(&amp;sp_dd), <span class="keyword">sizeof</span>(sp_dd));</span><br><span class="line">            sp_dd.cbSize = <span class="keyword">sizeof</span>(sp_dd);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> res = SetupDiGetDeviceInterfaceDetail(h_dev_info, &amp;sp_did, psp_did, dw_size, &amp;dw_size, &amp;sp_dd);</span><br><span class="line">            <span class="keyword">if</span> (res) &#123;</span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">auto</span> h_drive = CreateFile(psp_did-&gt;DevicePath, <span class="number">0</span>,</span><br><span class="line">                                                FILE_SHARE_READ | FILE_SHARE_WRITE, <span class="literal">NULL</span>, OPEN_EXISTING, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">                <span class="keyword">if</span> (h_drive != INVALID_HANDLE_VALUE) &#123;</span><br><span class="line">                    STORAGE_DEVICE_NUMBER sdn;</span><br><span class="line">                    DWORD dw_bytes_returned = <span class="number">0</span>;</span><br><span class="line">                    res = DeviceIoControl(h_drive, IOCTL_STORAGE_GET_DEVICE_NUMBER, <span class="literal">NULL</span>, <span class="number">0</span>, &amp;sdn, <span class="keyword">sizeof</span>(sdn), &amp;dw_bytes_returned, <span class="literal">NULL</span>);</span><br><span class="line">                    <span class="keyword">if</span> (res) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (disk_number == <span class="keyword">static_cast</span>&lt;<span class="keyword">long</span>&gt;(sdn.DeviceNumber)) &#123;</span><br><span class="line">                            CloseHandle(h_drive);</span><br><span class="line">                            SetupDiDestroyDeviceInfoList(h_dev_info);</span><br><span class="line">                            <span class="keyword">return</span> sp_dd.DevInst;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    CloseHandle(h_drive);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            HeapFree(GetProcessHeap(), <span class="number">0</span>, psp_did);</span><br><span class="line">        &#125;</span><br><span class="line">        dw_index++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SetupDiDestroyDeviceInfoList(h_dev_info);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">UsbDrivesManager::EjectUsbDisk</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> disk_number)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> dev_inst = GetDrivesDevInstByDiskNumber(disk_number);</span><br><span class="line">    <span class="keyword">if</span> (dev_inst == <span class="number">0</span>) &#123;</span><br><span class="line">        qDebug(<span class="string">&quot;GetDrivesDevInstDiskNumber failed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ULONG status = <span class="number">0</span>;</span><br><span class="line">    ULONG problem_number = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">auto</span> veto_type = PNP_VetoTypeUnknown;</span><br><span class="line">    <span class="keyword">wchar_t</span> veto_name[MAX_PATH];</span><br><span class="line">    <span class="keyword">auto</span> b_success = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> res = CM_Get_Parent(&amp;dev_inst, dev_inst, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (res != CR_SUCCESS)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">res = CM_Get_DevNode_Status(&amp;status, &amp;problem_number, dev_inst, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (res != CR_SUCCESS)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">auto</span> is_removable = ((status &amp; DN_REMOVABLE) != <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    qDebug(<span class="string">&quot;is removable:%d\n&quot;</span>, is_removable);</span><br><span class="line">    <span class="comment">// try 3 times</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        veto_name[<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (is_removable)</span><br><span class="line">            res = CM_Request_Device_Eject(dev_inst, &amp;veto_type, veto_name, MAX_PATH, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            res = CM_Query_And_Remove_SubTree(dev_inst, &amp;veto_type, veto_name, MAX_PATH, <span class="number">0</span>);</span><br><span class="line">        b_success = (res == CR_SUCCESS &amp;&amp; veto_name[<span class="number">0</span>] == <span class="string">&#x27;\0&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (b_success)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Sleep(<span class="number">300</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (b_success)</span><br><span class="line">        qDebug(<span class="string">&quot;Success\n\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info flat"><p>上面代码的函数用到的参数可以根据 <strong>STORAGE_DEVICE_NUMBER</strong>下的<strong>DeviceNumber</strong>进行获取<br />使用 <strong>CM_Request_Device_Eject</strong> 函数，请加上 <strong>#pragma comment(lib, “setupapi.lib”)</strong> 以及 <strong>#include &lt;cfgmgr32.h&gt;</strong><br />否则会编译失败，提示 <strong>无法解析的外部符号</strong></p></div><h2 id="彩蛋"><a class="markdownIt-Anchor" href="#彩蛋"></a> 彩蛋</h2><p>其实我用IDA和procexp企图看火绒的U盘弹出函数或者调用的API的</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-9/BogImages/1586441793216.png" alt="MarxCBR的小屋" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-9/BogImages/1586442039050.png" alt="MarxCBR的小屋" /></p><p>结果就是失败了，哈哈哈，果然<strong>菜是原罪</strong>啊<br />不过由此得知了火绒的界面是用DuiLib开发的，哈哈哈</p><center>要是感觉不错的话，就留个言评论一下下呀，欢迎各位大哥指正</center>]]></content>
    
    <summary type="html">
    
      利用C++真正的弹出U盘
    
    </summary>
    
    
      <category term="C++" scheme="https://www.marxcbr.cn/categories/C/"/>
    
    
      <category term="C++" scheme="https://www.marxcbr.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>在VS2017中配置CppCheck代码静态检查工具</title>
    <link href="https://www.marxcbr.cn/archives/db7259e3.html"/>
    <id>https://www.marxcbr.cn/archives/db7259e3.html</id>
    <published>2020-04-03T06:45:42.000Z</published>
    <updated>2020-12-23T13:48:32.321Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>最近代码写的稍微有点多，有写新功能，也有做旧代码的重构<br />回顾之前的代码，总是感觉当年写的像一坨翔~<br />这写的都是啥呀，哇~好丑的格式、好烂的代码……<br />运行起来的时候，哇~又崩了~哇又引发异常了~怎么又访问冲突了呀</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-3/BogImages/1585896957485.png" alt="MarxCBR的小屋" /></p><p>所以，我们不能单靠VS自带的检查工具，虽然它也能检查出一些问题。但是我显然需要更强大的检查扫描工具<br />鉴于之前在华为实习时将代码丢到CI/CD中被<strong>PCLint</strong>吊锤，无限警告报错的经历<br />我第一时间就想到了配置PCLint。然后查了一下，卧槽，要收费？没钱没钱~<br />接着就开源真香系列，CppCheck 启动！</p><h2 id="简单介绍一下cppcheck"><a class="markdownIt-Anchor" href="#简单介绍一下cppcheck"></a> 简单介绍一下CppCheck</h2><blockquote><p>Cppcheck是一种用于C和C ++ 编程语言的静态代码分析工具。 它是一个多功能工具，可以检查非标准代码。 [2] 创始人和首席开发人员是DanielMarjamäki。<br />Cppcheck是GNU通用公共许可证下的免费软件 。</p><ul><li>来自维基百科解释 <a href="https://zh.wikipedia.org/wiki/Cppcheck">Cppcheck</a></li></ul></blockquote><h2 id="开始安装搭建"><a class="markdownIt-Anchor" href="#开始安装搭建"></a> 开始安装搭建</h2><h3 id="到官网下载msi"><a class="markdownIt-Anchor" href="#到官网下载msi"></a> 到官网下载msi</h3><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-3/BogImages/1585897700228.png" alt="MarxCBR的小屋" /></p><p>我们<a href="https://github.com/danmar/cppcheck/releases">点击链接</a>下载文件</p><h3 id="双击打开msi安装包按照默认下一步即可"><a class="markdownIt-Anchor" href="#双击打开msi安装包按照默认下一步即可"></a> 双击打开msi安装包，按照默认下一步即可</h3><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-2/BogImages/1585817194646.png" alt="MarxCBR的小屋" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-2/BogImages/1585817218184.png" alt="MarxCBR的小屋" /></p><h3 id="安装vs的插件"><a class="markdownIt-Anchor" href="#安装vs的插件"></a> 安装VS的插件</h3><p>在扩展和更新里面搜索安装</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-3/BogImages/1585897820994.png" alt="MarxCBR的小屋" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-2/BogImages/1585817307359.png" alt="MarxCBR的小屋" /></p><p>这里有意思的是，你在里面点下载之后，他会给你“虚晃一枪”给他把github仓库的链接给你打开了。然后自己点击下载就可</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-2/BogImages/1585817290927.png" alt="MarxCBR的小屋" /></p><p>双击安装，他会提示你关掉VS</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-2/BogImages/1585817329382.png" alt="MarxCBR的小屋" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-2/BogImages/1585817381605.png" alt="MarxCBR的小屋" /></p><h2 id="测试使用"><a class="markdownIt-Anchor" href="#测试使用"></a> 测试使用</h2><h3 id="vs直接编译"><a class="markdownIt-Anchor" href="#vs直接编译"></a> VS直接编译</h3><p>这里我测试两个项目</p><p>之前文章用到的dll的代码编译结果<br /><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-3/BogImages/1585898026077.png" alt="MarxCBR的小屋" /></p><p>之前文章提到的毕业设计的代码编译结果<br /><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-2/BogImages/1585817563127.png" alt="MarxCBR的小屋" /></p><p>可以看到VS一个问题都没给我找到</p><h3 id="在vs里面用cppcheck分析扫描一下"><a class="markdownIt-Anchor" href="#在vs里面用cppcheck分析扫描一下"></a> 在VS里面用CppCheck分析扫描一下</h3><p>毕业设计的代码扫描结果，上来就给我警告内存泄露、未使用的变量等等提示</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-2/BogImages/1585817639691.png" alt="MarxCBR的小屋" /></p><p>根据提示，修正之后，再扫描一次</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-2/BogImages/1585817799527.png" alt="MarxCBR的小屋" /></p><p>扫描一下DLL的那个项目的代码</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-3/BogImages/1585898308038.png" alt="MarxCBR的小屋" /></p><p>当然也给我挑出了那些越界的，未使用的变量和函数等问题</p><p>举个栗子，这个代码显然越界了，对应了上图230行的警告。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> buffer[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">ReadProcessMemory(pubgHandle, (LPVOID)GetModuleBaseAddress(g_pid, processName), buffer, <span class="number">2</span>, <span class="literal">NULL</span>);</span><br><span class="line">buffer[<span class="number">3</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="直接使用gui客户端"><a class="markdownIt-Anchor" href="#直接使用gui客户端"></a> 直接使用GUI客户端</h3><p>可以在客户端里面打开项目进行扫描分析</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-3/BogImages/1585898676469.png" alt="MarxCBR的小屋" /></p><p>综合来说，好评哦，搭建配置这么简单，就可以提高自己的代码规范，血赚有没有！</p><center>要是感觉不错的话，就留个言评论一下下呀，欢迎各位大哥指正</center>]]></content>
    
    <summary type="html">
    
      在VS2017中配置CppCheck代码静态检查工具去检查C++的代码
    
    </summary>
    
    
      <category term="C++" scheme="https://www.marxcbr.cn/categories/C/"/>
    
      <category term="Visual Studio" scheme="https://www.marxcbr.cn/categories/Visual-Studio/"/>
    
    
      <category term="C++" scheme="https://www.marxcbr.cn/tags/C/"/>
    
      <category term="Visual Studio" scheme="https://www.marxcbr.cn/tags/Visual-Studio/"/>
    
      <category term="安全" scheme="https://www.marxcbr.cn/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="静态检查" scheme="https://www.marxcbr.cn/tags/%E9%9D%99%E6%80%81%E6%A3%80%E6%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>利用 Detours Hook CreateProcess 实现进程启动拦截</title>
    <link href="https://www.marxcbr.cn/archives/79a50542.html"/>
    <id>https://www.marxcbr.cn/archives/79a50542.html</id>
    <published>2020-04-02T08:00:57.000Z</published>
    <updated>2020-12-23T13:48:32.319Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>为什么要去利用 detours 进行 Hook CreateProcess 实现进程启动拦截<br />因为学弟问到了这个问题，就结合之前发出来的那个 Hook OpenProcess 的手法一起给做出来了</p><p>进程启动拦截的作用</p><ul><li>监控启动的进程，最近有什么进程启动过</li><li>在进程启动前可以被我进行一些操作，比如<strong>扫描是否有毒</strong>，有问题劳资就不给他启动了，对吧</li></ul><p>所以，就做了一下这个~</p><p>我们知道 detours 是需要 一个和原函数声明一样的假冒函数的，所以，可以大部分参考<a href="https://www.marxcbr.cn/archives/1dd9aa1.html">之前那篇文章</a>进行处理</p><p>这次代码贴的有点多，所以，就直接先给大家看看效果<br />想先看代码建议直接拖到最后看代码。</p><h2 id="效果"><a class="markdownIt-Anchor" href="#效果"></a> 效果</h2><p>Gif文件过大，不适用放到博客中，请点击打开github查看<br /><a href="https://github.com/97CBR/VS2017/blob/master/%E5%90%AF%E5%8A%A8%E7%9B%91%E6%8E%A7.gif">效果GIF</a></p><h2 id="安装detours"><a class="markdownIt-Anchor" href="#安装detours"></a> 安装detours</h2><p>我在这里使用的办法，虽然是最不硬核的办法，但是可能是最节省时间的办法<br />那就是在<strong>NuGet</strong>里面安装</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-3-31/BogImages/1585663612306.png" alt="enter description here" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-3-31/BogImages/1585663665739.png" alt="enter description here" /></p><h2 id="创建准备注入的dll项目"><a class="markdownIt-Anchor" href="#创建准备注入的dll项目"></a> 创建准备注入的dll项目</h2><p>创建新项目去创建一个dll项目</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-3-31/BogImages/1585663805600.png" alt="enter description here" /></p><h2 id="声明我们需要的自己的-新-旧-createprocess-函数"><a class="markdownIt-Anchor" href="#声明我们需要的自己的-新-旧-createprocess-函数"></a> 声明我们需要的自己的 新-旧 CreateProcess 函数</h2><p>注意Windows有两个CreateProcess，</p><ul><li>一个是 CreateProcessA</li><li>一个是 CreateProcessW</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">BOOL</span><span class="params">(WINAPI* pCreateProcessA)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">_In_opt_ LPCSTR lpApplicationName,</span></span></span><br><span class="line"><span class="function"><span class="params">_Inout_opt_ LPSTR lpCommandLine,</span></span></span><br><span class="line"><span class="function"><span class="params">_In_opt_ LPSECURITY_ATTRIBUTES lpProcessAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">_In_opt_ LPSECURITY_ATTRIBUTES lpThreadAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">_In_ BOOL bInheritHandles,</span></span></span><br><span class="line"><span class="function"><span class="params">_In_ DWORD dwCreationFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">_In_opt_ LPVOID lpEnvironment,</span></span></span><br><span class="line"><span class="function"><span class="params">_In_opt_ LPCSTR lpCurrentDirectory,</span></span></span><br><span class="line"><span class="function"><span class="params">_In_ LPSTARTUPINFOA lpStartupInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">_Out_ LPPROCESS_INFORMATION lpProcessInformation</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> </span>= CreateProcessA;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">BOOL</span><span class="params">(WINAPI* pCreateProcessW)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    _In_opt_ LPCWSTR lpApplicationName,</span></span></span><br><span class="line"><span class="function"><span class="params">    _Inout_opt_ LPWSTR lpCommandLine,</span></span></span><br><span class="line"><span class="function"><span class="params">    _In_opt_ LPSECURITY_ATTRIBUTES lpProcessAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">    _In_opt_ LPSECURITY_ATTRIBUTES lpThreadAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">    _In_ BOOL bInheritHandles,</span></span></span><br><span class="line"><span class="function"><span class="params">    _In_ DWORD dwCreationFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">    _In_opt_ LPVOID lpEnvironment,</span></span></span><br><span class="line"><span class="function"><span class="params">    _In_opt_ LPCWSTR lpCurrentDirectory,</span></span></span><br><span class="line"><span class="function"><span class="params">    _In_ LPSTARTUPINFOW lpStartupInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">    _Out_ LPPROCESS_INFORMATION lpProcessInformation</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> </span>= CreateProcessW;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL WINAPI <span class="title">newCreateProcessA</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">_In_opt_ LPCSTR lpApplicationName,</span></span></span><br><span class="line"><span class="function"><span class="params">_Inout_opt_ LPSTR lpCommandLine,</span></span></span><br><span class="line"><span class="function"><span class="params">_In_opt_ LPSECURITY_ATTRIBUTES lpProcessAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">_In_opt_ LPSECURITY_ATTRIBUTES lpThreadAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">_In_ BOOL bInheritHandles,</span></span></span><br><span class="line"><span class="function"><span class="params">_In_ DWORD dwCreationFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">_In_opt_ LPVOID lpEnvironment,</span></span></span><br><span class="line"><span class="function"><span class="params">_In_opt_ LPCSTR lpCurrentDirectory,</span></span></span><br><span class="line"><span class="function"><span class="params">_In_ LPSTARTUPINFOA lpStartupInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">_Out_ LPPROCESS_INFORMATION lpProcessInformation)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> text[<span class="number">128</span>];</span><br><span class="line">    <span class="built_in">sprintf</span>(text, <span class="string">&quot;HOOKing！: %s \n&quot;</span>, lpApplicationName);</span><br><span class="line">    MessageBox(<span class="number">0</span>, text, TEXT(<span class="string">&quot;提示&quot;</span>), MB_OK);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设我们只拦截禁止 cmd 启动</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(lpApplicationName, <span class="string">&quot;C:\\Windows\\System32\\cmd.exe&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        TCHAR  text[<span class="number">128</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">        wsprintf(text, <span class="string">&quot;HOOKing！禁止启动: %s \n&quot;</span>, lpApplicationName);</span><br><span class="line">        MessageBox(<span class="number">0</span>, text, TEXT(<span class="string">&quot;提示&quot;</span>), MB_OK);</span><br><span class="line">        SetLastError(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pCreateProcessA(</span><br><span class="line">               lpApplicationName,</span><br><span class="line">               lpCommandLine,</span><br><span class="line">               lpProcessAttributes,</span><br><span class="line">               lpThreadAttributes,</span><br><span class="line">               bInheritHandles,</span><br><span class="line">               dwCreationFlags,</span><br><span class="line">               lpEnvironment,</span><br><span class="line">               lpCurrentDirectory,</span><br><span class="line">               lpStartupInfo,</span><br><span class="line">               lpProcessInformation</span><br><span class="line">           );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL WINAPI <span class="title">newCreateProcessW</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    _In_opt_ LPCWSTR lpApplicationName,</span></span></span><br><span class="line"><span class="function"><span class="params">    _Inout_opt_ LPWSTR lpCommandLine,</span></span></span><br><span class="line"><span class="function"><span class="params">    _In_opt_ LPSECURITY_ATTRIBUTES lpProcessAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">    _In_opt_ LPSECURITY_ATTRIBUTES lpThreadAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">    _In_ BOOL bInheritHandles,</span></span></span><br><span class="line"><span class="function"><span class="params">    _In_ DWORD dwCreationFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">    _In_opt_ LPVOID lpEnvironment,</span></span></span><br><span class="line"><span class="function"><span class="params">    _In_opt_ LPCWSTR lpCurrentDirectory,</span></span></span><br><span class="line"><span class="function"><span class="params">    _In_ LPSTARTUPINFOW lpStartupInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">    _Out_ LPPROCESS_INFORMATION lpProcessInformation)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    TCHAR  text[<span class="number">128</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    wsprintf(text, <span class="string">&quot;HOOKing！: %s \n&quot;</span>, lpApplicationName);</span><br><span class="line">    MessageBox(<span class="number">0</span>, text, TEXT(<span class="string">&quot;提示&quot;</span>), MB_OK);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设我们只拦截禁止 cmd 启动</span></span><br><span class="line">    <span class="keyword">if</span> (_wcsicmp(lpApplicationName, <span class="string">L&quot;C:\\Windows\\System32\\cmd.exe&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        TCHAR  text[<span class="number">128</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">        wsprintf(text, <span class="string">&quot;HOOKing！禁止启动: %s \n&quot;</span>, lpApplicationName);</span><br><span class="line">        MessageBox(<span class="number">0</span>, text, TEXT(<span class="string">&quot;提示&quot;</span>), MB_OK);</span><br><span class="line">        SetLastError(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pCreateProcessW(</span><br><span class="line">               lpApplicationName,</span><br><span class="line">               lpCommandLine,</span><br><span class="line">               lpProcessAttributes,</span><br><span class="line">               lpThreadAttributes,</span><br><span class="line">               bInheritHandles,</span><br><span class="line">               dwCreationFlags,</span><br><span class="line">               lpEnvironment,</span><br><span class="line">               lpCurrentDirectory,</span><br><span class="line">               lpStartupInfo,</span><br><span class="line">               lpProcessInformation</span><br><span class="line">           );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="声明dll共享节做-hook-的控制"><a class="markdownIt-Anchor" href="#声明dll共享节做-hook-的控制"></a> 声明DLL共享节，做 Hook 的控制</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//共享代码段</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> data_seg(<span class="meta-string">&quot;SHARED&quot;</span>)</span></span><br><span class="line"></span><br><span class="line">HHOOK g_hOpenProcessHook = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">BOOL g_bStopHook = FALSE;</span><br><span class="line">BOOL g_bHookInstalled = FALSE;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> data_seg()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">&quot;/section:SHARED,RWS&quot;</span>)</span></span><br></pre></td></tr></table></figure><h2 id="利用setwindowshookex进行全局hook"><a class="markdownIt-Anchor" href="#利用setwindowshookex进行全局hook"></a> 利用SetWindowsHookEx进行全局HOOK</h2><p>在OpenProcessHookProc这个回调函数中进行处理我们的HOOK</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导出函数 加载全局钩子</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport) <span class="function">BOOL <span class="title">SetGoableHook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    g_bStopHook = FALSE;</span><br><span class="line"></span><br><span class="line">    g_hOpenProcessHook = SetWindowsHookEx(WH_GETMESSAGE,</span><br><span class="line">                                          CreateProcessHookProc,</span><br><span class="line">                                          ModuleFromAddress(CreateProcessHookProc), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (g_hOpenProcessHook == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> text[<span class="number">30</span>];</span><br><span class="line">        wsprintf(text, <span class="string">&quot;HOOK失败！error : %d n&quot;</span>, GetLastError());</span><br><span class="line">        MessageBox(<span class="number">0</span>, text, TEXT(<span class="string">&quot;错误&quot;</span>), MB_OK);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调用这个-拦截启动hook的方法"><a class="markdownIt-Anchor" href="#调用这个-拦截启动hook的方法"></a> 调用这个 拦截启动HOOK的方法</h2><p>声明两个函数、一个是进行HOOK函数、一个是取消HOOK的函数，可以灵活处理</p><p><strong>此代码处于另一软件项目</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">forLong::myhook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ui.label-&gt;setText(<span class="string">&quot;hooking&quot;</span>);</span><br><span class="line">    HINSTANCE hDLL = ::LoadLibrary(<span class="string">L&quot;MarxHook.dll&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hDLL) &#123;</span><br><span class="line"></span><br><span class="line">        PFN_setData setData = (PFN_setData)::GetProcAddress(hDLL, <span class="string">&quot;setData&quot;</span>);</span><br><span class="line">        PFN_getData getData = (PFN_getData)::GetProcAddress(hDLL, <span class="string">&quot;getData&quot;</span>);</span><br><span class="line">        SetGoableHook func = (SetGoableHook)GetProcAddress(hDLL, <span class="string">&quot;SetGoableHook&quot;</span>);</span><br><span class="line">        qDebug() &lt;&lt; (<span class="keyword">int</span>)getpid() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        setData((<span class="keyword">int</span>)getpid());</span><br><span class="line">        <span class="keyword">int</span> s = getData();</span><br><span class="line">        func();</span><br><span class="line">        <span class="comment">/*qDebug() &lt;&lt;  &lt;&lt; endl;*/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">forLong::unhook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ui.label-&gt;setText(<span class="string">&quot;unhook&quot;</span>);</span><br><span class="line">    HINSTANCE hDLL = ::LoadLibrary(<span class="string">L&quot;MarxHook.dll&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (hDLL) &#123;</span><br><span class="line">        DropGoableHook func = (DropGoableHook)GetProcAddress(hDLL, <span class="string">&quot;DropGoableHook&quot;</span>);</span><br><span class="line">        func();</span><br><span class="line">        PFN_setData setData = (PFN_setData)::GetProcAddress(hDLL, <span class="string">&quot;setData&quot;</span>);</span><br><span class="line">        PFN_getData getData = (PFN_getData)::GetProcAddress(hDLL, <span class="string">&quot;getData&quot;</span>);</span><br><span class="line">        setData(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//int s = getData();</span></span><br><span class="line">        func();</span><br><span class="line">        <span class="comment">/*   qDebug() &lt;&lt; getData() &lt;&lt; endl;*/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="整个dll项目代码一起给出来吧"><a class="markdownIt-Anchor" href="#整个dll项目代码一起给出来吧"></a> 整个dll项目代码一起给出来吧</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;detours.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;TlHelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> HMODULE s_hDll;</span><br><span class="line"><span class="comment">//共享代码段</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> data_seg(<span class="meta-string">&quot;SHARED&quot;</span>)</span></span><br><span class="line">HHOOK g_hMessageHook = <span class="literal">NULL</span>;</span><br><span class="line">HHOOK g_hOpenProcessHook = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">BOOL g_bStopHook = FALSE;</span><br><span class="line">BOOL g_bHookInstalled = FALSE;</span><br><span class="line">DWORD g_pid = <span class="number">74144</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> data_seg()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">&quot;/section:SHARED,RWS&quot;</span>)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">HANDLE</span><span class="params">(WINAPI* pOpenProcess)</span><span class="params">(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwProcessId)</span> </span>= OpenProcess;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">BOOL</span><span class="params">(WINAPI* pCreateProcessA)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">_In_opt_ LPCSTR lpApplicationName,</span></span></span><br><span class="line"><span class="function"><span class="params">_Inout_opt_ LPSTR lpCommandLine,</span></span></span><br><span class="line"><span class="function"><span class="params">_In_opt_ LPSECURITY_ATTRIBUTES lpProcessAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">_In_opt_ LPSECURITY_ATTRIBUTES lpThreadAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">_In_ BOOL bInheritHandles,</span></span></span><br><span class="line"><span class="function"><span class="params">_In_ DWORD dwCreationFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">_In_opt_ LPVOID lpEnvironment,</span></span></span><br><span class="line"><span class="function"><span class="params">_In_opt_ LPCSTR lpCurrentDirectory,</span></span></span><br><span class="line"><span class="function"><span class="params">_In_ LPSTARTUPINFOA lpStartupInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">_Out_ LPPROCESS_INFORMATION lpProcessInformation</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> </span>= CreateProcessA;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">BOOL</span><span class="params">(WINAPI* pCreateProcessW)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    _In_opt_ LPCWSTR lpApplicationName,</span></span></span><br><span class="line"><span class="function"><span class="params">    _Inout_opt_ LPWSTR lpCommandLine,</span></span></span><br><span class="line"><span class="function"><span class="params">    _In_opt_ LPSECURITY_ATTRIBUTES lpProcessAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">    _In_opt_ LPSECURITY_ATTRIBUTES lpThreadAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">    _In_ BOOL bInheritHandles,</span></span></span><br><span class="line"><span class="function"><span class="params">    _In_ DWORD dwCreationFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">    _In_opt_ LPVOID lpEnvironment,</span></span></span><br><span class="line"><span class="function"><span class="params">    _In_opt_ LPCWSTR lpCurrentDirectory,</span></span></span><br><span class="line"><span class="function"><span class="params">    _In_ LPSTARTUPINFOW lpStartupInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">    _Out_ LPPROCESS_INFORMATION lpProcessInformation</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> </span>= CreateProcessW;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">DWORD <span class="title">GetProcID</span><span class="params">(<span class="keyword">char</span>* procName)</span></span>;</span><br><span class="line"></span><br><span class="line">HANDLE pubgHandle = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">char</span>* processName = (<span class="keyword">char</span>*)<span class="string">&quot;forLong.exe&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">HANDLE WINAPI <span class="title">hOpenProcess</span><span class="params">(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwProcessId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//if (GetProcID(processName) == dwProcessId) &#123;</span></span><br><span class="line">    <span class="keyword">if</span> (g_pid == dwProcessId) &#123;</span><br><span class="line">        dwDesiredAccess = PROCESS_VM_READ | PROCESS_VM_WRITE | PROCESS_QUERY_INFORMATION;</span><br><span class="line">        pubgHandle = pOpenProcess(dwDesiredAccess, bInheritHandle, dwProcessId);</span><br><span class="line">        SetLastError(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pOpenProcess(dwDesiredAccess, bInheritHandle, dwProcessId);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//CreateProcess</span></span><br><span class="line"><span class="function">BOOL WINAPI <span class="title">newCreateProcessA</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">_In_opt_ LPCSTR lpApplicationName,</span></span></span><br><span class="line"><span class="function"><span class="params">_Inout_opt_ LPSTR lpCommandLine,</span></span></span><br><span class="line"><span class="function"><span class="params">_In_opt_ LPSECURITY_ATTRIBUTES lpProcessAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">_In_opt_ LPSECURITY_ATTRIBUTES lpThreadAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">_In_ BOOL bInheritHandles,</span></span></span><br><span class="line"><span class="function"><span class="params">_In_ DWORD dwCreationFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">_In_opt_ LPVOID lpEnvironment,</span></span></span><br><span class="line"><span class="function"><span class="params">_In_opt_ LPCSTR lpCurrentDirectory,</span></span></span><br><span class="line"><span class="function"><span class="params">_In_ LPSTARTUPINFOA lpStartupInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">_Out_ LPPROCESS_INFORMATION lpProcessInformation)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> text[<span class="number">128</span>];</span><br><span class="line">    <span class="built_in">sprintf</span>(text, <span class="string">&quot;HOOKing！: %s \n&quot;</span>, lpApplicationName);</span><br><span class="line">    MessageBox(<span class="number">0</span>, text, TEXT(<span class="string">&quot;提示&quot;</span>), MB_OK);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(lpApplicationName, <span class="string">&quot;C:\\Windows\\System32\\cmd.exe&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        TCHAR  text[<span class="number">128</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">        wsprintf(text, <span class="string">&quot;HOOKing！禁止启动: %s \n&quot;</span>, lpApplicationName);</span><br><span class="line">        MessageBox(<span class="number">0</span>, text, TEXT(<span class="string">&quot;提示&quot;</span>), MB_OK);</span><br><span class="line"></span><br><span class="line">        SetLastError(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pCreateProcessA(</span><br><span class="line">               lpApplicationName,</span><br><span class="line">               lpCommandLine,</span><br><span class="line">               lpProcessAttributes,</span><br><span class="line">               lpThreadAttributes,</span><br><span class="line">               bInheritHandles,</span><br><span class="line">               dwCreationFlags,</span><br><span class="line">               lpEnvironment,</span><br><span class="line">               lpCurrentDirectory,</span><br><span class="line">               lpStartupInfo,</span><br><span class="line">               lpProcessInformation</span><br><span class="line">           );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL WINAPI <span class="title">newCreateProcessW</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    _In_opt_ LPCWSTR lpApplicationName,</span></span></span><br><span class="line"><span class="function"><span class="params">    _Inout_opt_ LPWSTR lpCommandLine,</span></span></span><br><span class="line"><span class="function"><span class="params">    _In_opt_ LPSECURITY_ATTRIBUTES lpProcessAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">    _In_opt_ LPSECURITY_ATTRIBUTES lpThreadAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">    _In_ BOOL bInheritHandles,</span></span></span><br><span class="line"><span class="function"><span class="params">    _In_ DWORD dwCreationFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">    _In_opt_ LPVOID lpEnvironment,</span></span></span><br><span class="line"><span class="function"><span class="params">    _In_opt_ LPCWSTR lpCurrentDirectory,</span></span></span><br><span class="line"><span class="function"><span class="params">    _In_ LPSTARTUPINFOW lpStartupInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">    _Out_ LPPROCESS_INFORMATION lpProcessInformation)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    TCHAR  text[<span class="number">128</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    wsprintf(text, <span class="string">&quot;HOOKing！: %s \n&quot;</span>, lpApplicationName);</span><br><span class="line">    MessageBox(<span class="number">0</span>, text, TEXT(<span class="string">&quot;提示&quot;</span>), MB_OK);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_wcsicmp(lpApplicationName, <span class="string">L&quot;C:\\Windows\\System32\\cmd.exe&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        TCHAR  text[<span class="number">128</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">        wsprintf(text, <span class="string">&quot;HOOKing！禁止启动: %s \n&quot;</span>, lpApplicationName);</span><br><span class="line">        MessageBox(<span class="number">0</span>, text, TEXT(<span class="string">&quot;提示&quot;</span>), MB_OK);</span><br><span class="line"></span><br><span class="line">        SetLastError(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pCreateProcessW(</span><br><span class="line">               lpApplicationName,</span><br><span class="line">               lpCommandLine,</span><br><span class="line">               lpProcessAttributes,</span><br><span class="line">               lpThreadAttributes,</span><br><span class="line">               bInheritHandles,</span><br><span class="line">               dwCreationFlags,</span><br><span class="line">               lpEnvironment,</span><br><span class="line">               lpCurrentDirectory,</span><br><span class="line">               lpStartupInfo,</span><br><span class="line">               lpProcessInformation</span><br><span class="line">           );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//查找函数地址</span></span><br><span class="line"><span class="function">HMODULE WINAPI <span class="title">ModuleFromAddress</span><span class="params">(PVOID pv)</span> </span>&#123;</span><br><span class="line">    MEMORY_BASIC_INFORMATION mbi;</span><br><span class="line">    <span class="keyword">if</span> (::VirtualQuery(pv, &amp;mbi, <span class="keyword">sizeof</span>(mbi)) != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> (HMODULE)mbi.AllocationBase;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD_PTR <span class="title">GetModuleBaseAddress</span><span class="params">(DWORD pid, TCHAR* name)</span> </span>&#123;</span><br><span class="line">    DWORD_PTR baseAddress = <span class="literal">NULL</span>;</span><br><span class="line">    HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, pid);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hSnapshot == INVALID_HANDLE_VALUE)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    MODULEENTRY32 entry = &#123; <span class="literal">NULL</span> &#125;;</span><br><span class="line"></span><br><span class="line">    entry.dwSize = <span class="keyword">sizeof</span>(MODULEENTRY32);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!Module32First(hSnapshot, &amp;entry)) &#123;</span><br><span class="line">        CloseHandle(hSnapshot);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(entry.szModule, name)) &#123;</span><br><span class="line">            baseAddress = (DWORD_PTR)entry.modBaseAddr;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (Module32Next(hSnapshot, &amp;entry));</span><br><span class="line"></span><br><span class="line">    CloseHandle(hSnapshot);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> baseAddress;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">SetHook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果已经安装就return</span></span><br><span class="line">    <span class="keyword">if</span> (g_bHookInstalled)</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line"></span><br><span class="line">    DetourTransactionBegin();</span><br><span class="line">    DetourUpdateThread(GetCurrentThread());</span><br><span class="line"></span><br><span class="line">    DetourAttach((PVOID*)&amp;pOpenProcess, hOpenProcess);</span><br><span class="line">    DetourAttach((PVOID*)&amp;pCreateProcessA, newCreateProcessA);</span><br><span class="line">    DetourAttach((PVOID*)&amp;pCreateProcessW, newCreateProcessW);</span><br><span class="line"></span><br><span class="line">DetourTransactionCommit();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (pubgHandle != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> buffer[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        ReadProcessMemory(pubgHandle, (LPVOID)GetModuleBaseAddress(g_pid, processName), buffer, <span class="number">2</span>, <span class="literal">NULL</span>);</span><br><span class="line">        buffer[<span class="number">3</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; buffer &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    g_bHookInstalled = TRUE;</span><br><span class="line">    <span class="keyword">return</span> g_bHookInstalled;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DropHook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果已经卸载就return</span></span><br><span class="line">    <span class="keyword">if</span> (!g_bHookInstalled)<span class="keyword">return</span> TRUE;</span><br><span class="line"></span><br><span class="line">    DetourTransactionBegin();</span><br><span class="line">    DetourUpdateThread(GetCurrentThread());</span><br><span class="line">    DetourDetach((PVOID*)&amp;pOpenProcess, hOpenProcess);</span><br><span class="line">    DetourDetach((PVOID*)&amp;pCreateProcessA, newCreateProcessA);</span><br><span class="line">    DetourDetach((PVOID*)&amp;pCreateProcessW, newCreateProcessW);</span><br><span class="line"></span><br><span class="line">    LONG ret = DetourTransactionCommit();</span><br><span class="line">    g_bHookInstalled = FALSE;</span><br><span class="line">    <span class="keyword">return</span> ret == NO_ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> LRESULT CALLBACK <span class="title">CreateProcessHookProc</span><span class="params">(<span class="keyword">int</span> nCode, WPARAM wParam, LPARAM lParam)</span> </span>&#123;</span><br><span class="line">    PKBDLLHOOKSTRUCT p = (PKBDLLHOOKSTRUCT)lParam;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">wchar_t</span> Dir[_MAX_DIR];</span><br><span class="line">    <span class="keyword">wchar_t</span> FullPath[MAX_PATH]; <span class="comment">// [sp+200h] [bp-614h]@1</span></span><br><span class="line">    <span class="keyword">wchar_t</span> Ext[_MAX_EXT];</span><br><span class="line">    <span class="keyword">wchar_t</span> Filename[_MAX_FNAME];</span><br><span class="line">    <span class="keyword">wchar_t</span> Drive[_MAX_DRIVE];</span><br><span class="line">    GetModuleFileNameW(<span class="number">0</span>, FullPath, MAX_PATH);</span><br><span class="line">    _wsplitpath_s(FullPath, Drive, _MAX_DRIVE, Dir, _MAX_DIR, Filename, _MAX_FNAME, Ext, _MAX_EXT);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">wstring</span> tar = Filename;</span><br><span class="line"></span><br><span class="line">    transform(tar.begin(), tar.end(), tar.begin(), towlower);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//C:\Windows\explorer.exe</span></span><br><span class="line">    <span class="comment">//C:\Windows\System32\Taskmgr.exe</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((_wcsicmp(Filename, <span class="string">L&quot;explorer&quot;</span>) == <span class="number">0</span>) || (_wcsicmp(Filename, <span class="string">L&quot;taskmgr&quot;</span>) == <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="comment">//if (true) &#123;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//安装钩子</span></span><br><span class="line">        <span class="comment">//MessageBox(NULL, &quot;DLL_PROCESS_ATTACH taskmgr&quot;, &quot;info&quot;, MB_OK);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!g_bStopHook)</span><br><span class="line">            SetHook();</span><br><span class="line">        <span class="comment">//卸载钩子</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            DropHook();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> CallNextHookEx(g_hOpenProcessHook, nCode, wParam, lParam);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//导出函数 加载全局钩子</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport) <span class="function">BOOL <span class="title">SetGoableHook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    g_bStopHook = FALSE;</span><br><span class="line"></span><br><span class="line">    g_hOpenProcessHook = SetWindowsHookEx(WH_GETMESSAGE,</span><br><span class="line">                                          CreateProcessHookProc,</span><br><span class="line">                                          ModuleFromAddress(CreateProcessHookProc), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (g_hOpenProcessHook == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> text[<span class="number">30</span>];</span><br><span class="line">        wsprintf(text, <span class="string">&quot;HOOK失败！error : %d n&quot;</span>, GetLastError());</span><br><span class="line">        MessageBox(<span class="number">0</span>, text, TEXT(<span class="string">&quot;错误&quot;</span>), MB_OK);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出函数 卸载全局钩子</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport) <span class="function">BOOL <span class="title">DropGoableHook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    g_bStopHook = TRUE;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span>  __declspec(dllexport) <span class="function"><span class="keyword">void</span> <span class="title">setData</span><span class="params">(<span class="keyword">int</span> target_pid)</span> </span>&#123;</span><br><span class="line">    g_pid = target_pid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span>  __declspec(dllexport) <span class="function"><span class="keyword">int</span> <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> g_pid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HMODULE hModule,</span></span></span><br><span class="line"><span class="function"><span class="params">                      DWORD  ul_reason_for_call,</span></span></span><br><span class="line"><span class="function"><span class="params">                      LPVOID lpReserved</span></span></span><br><span class="line"><span class="function"><span class="params">                     )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call) &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">        s_hDll = hModule;</span><br><span class="line">        DisableThreadLibraryCalls(hModule);</span><br><span class="line">        <span class="comment">//SetGoableHook();</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="comment">//DropGoableHook();</span></span><br><span class="line">        UnhookWindowsHookEx(g_hOpenProcessHook);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dllmain.cpp : Defines the entry point for the DLL application.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;detours.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;TlHelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//共享代码段</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> data_seg(<span class="meta-string">&quot;SHARED&quot;</span>)</span></span><br><span class="line">HHOOK g_hMessageHook = <span class="literal">NULL</span>;</span><br><span class="line">HHOOK g_hOpenProcessHook = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">BOOL g_bStopHook = FALSE;</span><br><span class="line">BOOL g_bHookInstalled = FALSE;</span><br><span class="line">DWORD g_pid = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> data_seg()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">&quot;/section:SHARED,RWS&quot;</span>)</span></span><br><span class="line"><span class="comment">//__declspec(allocate(&quot;SHARED&quot;))int g_pid=0;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> HMODULE s_hDll;</span><br><span class="line"></span><br><span class="line">HINSTANCE g_hInstance = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*显示GetLastError的信息*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showerr</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> message[<span class="number">255</span>];</span><br><span class="line">FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM, <span class="number">0</span>, GetLastError()</span><br><span class="line">, MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), message, <span class="number">255</span>, <span class="number">0</span>);</span><br><span class="line">MessageBox(<span class="literal">NULL</span>, message, m, MB_OK);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD <span class="title">MyGetProcessId</span><span class="params">(<span class="keyword">char</span>* ProcessName)</span> </span>&#123;</span><br><span class="line">PROCESSENTRY32 pe32;</span><br><span class="line">pe32.dwSize = <span class="keyword">sizeof</span>(pe32);</span><br><span class="line"><span class="comment">//获得系统内所有进程快照</span></span><br><span class="line">HANDLE hProcessSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (hProcessSnap == INVALID_HANDLE_VALUE)</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line"><span class="comment">//枚举列表中的第一个进程</span></span><br><span class="line">BOOL bProcess = Process32First(hProcessSnap, &amp;pe32);</span><br><span class="line"><span class="keyword">while</span> (bProcess) &#123;</span><br><span class="line"><span class="comment">//比较得到的进程名和要保护的进程名是否相同</span></span><br><span class="line"><span class="keyword">if</span> (stricmp(pe32.szExeFile, ProcessName) == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//相同则返回此进程ID</span></span><br><span class="line"><span class="keyword">return</span> pe32.th32ProcessID;</span><br><span class="line">&#125;</span><br><span class="line">bProcess = Process32Next(hProcessSnap, &amp;pe32);</span><br><span class="line">&#125;</span><br><span class="line">CloseHandle(hProcessSnap);</span><br><span class="line"><span class="comment">//否则返回0</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> ULONG_PTR  DWORD_PTR;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">HANDLE</span><span class="params">(WINAPI* pOpenProcess)</span><span class="params">(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwProcessId)</span> </span>= OpenProcess;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD <span class="title">GetProcID</span><span class="params">(<span class="keyword">char</span>* procName)</span></span>;</span><br><span class="line"></span><br><span class="line">HANDLE pubgHandle = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">char</span>* processName = (<span class="keyword">char</span>*)<span class="string">&quot;forLong.exe&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">HANDLE WINAPI <span class="title">hOpenProcess</span><span class="params">(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwProcessId)</span> </span>&#123;</span><br><span class="line"><span class="comment">//if (GetProcID(processName) == dwProcessId) &#123;</span></span><br><span class="line"><span class="keyword">if</span> (g_pid == dwProcessId) &#123;</span><br><span class="line">dwDesiredAccess = PROCESS_VM_READ | PROCESS_VM_WRITE | PROCESS_QUERY_INFORMATION;</span><br><span class="line">pubgHandle = pOpenProcess(dwDesiredAccess, bInheritHandle, dwProcessId);</span><br><span class="line">SetLastError(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pOpenProcess(dwDesiredAccess, bInheritHandle, dwProcessId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD <span class="title">GetProcID</span><span class="params">(<span class="keyword">char</span>* procName)</span> </span>&#123;</span><br><span class="line">PROCESSENTRY32 pe32;</span><br><span class="line">HANDLE hSnapshot = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">pe32.dwSize = <span class="keyword">sizeof</span>(PROCESSENTRY32);</span><br><span class="line">hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Process32First(hSnapshot, &amp;pe32)) &#123;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(pe32.szExeFile, procName) == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (Process32Next(hSnapshot, &amp;pe32));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hSnapshot != INVALID_HANDLE_VALUE)</span><br><span class="line">CloseHandle(hSnapshot);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pe32.th32ProcessID;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD_PTR <span class="title">GetModuleBaseAddress</span><span class="params">(DWORD pid, TCHAR* name)</span> </span>&#123;</span><br><span class="line">DWORD_PTR baseAddress = <span class="literal">NULL</span>;</span><br><span class="line">HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, pid);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hSnapshot == INVALID_HANDLE_VALUE)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">MODULEENTRY32 entry = &#123; <span class="literal">NULL</span> &#125;;</span><br><span class="line"></span><br><span class="line">entry.dwSize = <span class="keyword">sizeof</span>(MODULEENTRY32);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!Module32First(hSnapshot, &amp;entry)) &#123;</span><br><span class="line">CloseHandle(hSnapshot);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">strcmp</span>(entry.szModule, name)) &#123;</span><br><span class="line">baseAddress = (DWORD_PTR)entry.modBaseAddr;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (Module32Next(hSnapshot, &amp;entry));</span><br><span class="line"></span><br><span class="line">CloseHandle(hSnapshot);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> baseAddress;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hookOpenProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//AllocConsole();</span></span><br><span class="line">DetourTransactionBegin();</span><br><span class="line">DetourUpdateThread(GetCurrentThread());</span><br><span class="line">DetourAttach((PVOID*)&amp;pOpenProcess, hOpenProcess);</span><br><span class="line">DetourTransactionCommit();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (pubgHandle != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">char</span> buffer[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">ReadProcessMemory(pubgHandle, (LPVOID)GetModuleBaseAddress(g_pid, processName), buffer, <span class="number">2</span>, <span class="literal">NULL</span>);</span><br><span class="line">buffer[<span class="number">3</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; buffer &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">SetHook</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//如果已经安装就return</span></span><br><span class="line"><span class="keyword">if</span> (g_bHookInstalled)</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line"></span><br><span class="line">CreateThread(<span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="keyword">reinterpret_cast</span>&lt;LPTHREAD_START_ROUTINE&gt;(hookOpenProcess), <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//CreateThread(NULL, NULL, reinterpret_cast&lt;LPTHREAD_START_ROUTINE&gt;(watch_task), NULL, NULL, NULL);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//char text[30];</span></span><br><span class="line"><span class="comment">//wsprintf(text, &quot;HOOK 启动！: %ld&quot;, GetCurrentThread());</span></span><br><span class="line"><span class="comment">//MessageBox(0, text, TEXT(&quot;OK&quot;), MB_OK);</span></span><br><span class="line"></span><br><span class="line">g_bHookInstalled = TRUE;</span><br><span class="line"><span class="keyword">return</span> g_bHookInstalled;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DropHook</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//如果已经卸载就return</span></span><br><span class="line"><span class="keyword">if</span> (!g_bHookInstalled)<span class="keyword">return</span> TRUE;</span><br><span class="line"></span><br><span class="line"><span class="comment">//char text[30];</span></span><br><span class="line"><span class="comment">//wsprintf(text, &quot;HOOK 解除！: %d&quot;, GetLastError());</span></span><br><span class="line"><span class="comment">//MessageBox(0, text, TEXT(&quot;错误&quot;), MB_OK);</span></span><br><span class="line"></span><br><span class="line">DetourTransactionBegin();</span><br><span class="line">DetourUpdateThread(GetCurrentThread());</span><br><span class="line">DetourDetach((PVOID*)&amp;pOpenProcess, hOpenProcess);</span><br><span class="line"></span><br><span class="line">LONG ret = DetourTransactionCommit();</span><br><span class="line">g_bHookInstalled = FALSE;</span><br><span class="line"><span class="keyword">return</span> ret == NO_ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找函数地址</span></span><br><span class="line"><span class="function">HMODULE WINAPI <span class="title">ModuleFromAddress</span><span class="params">(PVOID pv)</span> </span>&#123;</span><br><span class="line">MEMORY_BASIC_INFORMATION mbi;</span><br><span class="line"><span class="keyword">if</span> (::VirtualQuery(pv, &amp;mbi, <span class="keyword">sizeof</span>(mbi)) != <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> (HMODULE)mbi.AllocationBase;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> LRESULT CALLBACK <span class="title">OpenProcessHookProc</span><span class="params">(<span class="keyword">int</span> nCode, WPARAM wParam, LPARAM lParam)</span> </span>&#123;</span><br><span class="line">PKBDLLHOOKSTRUCT p = (PKBDLLHOOKSTRUCT)lParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">wchar_t</span> Dir[_MAX_DIR];</span><br><span class="line"><span class="keyword">wchar_t</span> FullPath[MAX_PATH]; <span class="comment">// [sp+200h] [bp-614h]@1</span></span><br><span class="line"><span class="keyword">wchar_t</span> Ext[_MAX_EXT];</span><br><span class="line"><span class="keyword">wchar_t</span> Filename[_MAX_FNAME];</span><br><span class="line"><span class="keyword">wchar_t</span> Drive[_MAX_DRIVE];</span><br><span class="line">GetModuleFileNameW(<span class="number">0</span>, FullPath, MAX_PATH);</span><br><span class="line">_wsplitpath_s(FullPath, Drive, _MAX_DRIVE, Dir, _MAX_DIR, Filename, _MAX_FNAME, Ext, _MAX_EXT);</span><br><span class="line"></span><br><span class="line"><span class="built_in">wstring</span> tar = Filename;</span><br><span class="line"></span><br><span class="line">transform(tar.begin(), tar.end(), tar.begin(), towlower);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (_wcsicmp(Filename, <span class="string">L&quot;Taskmgr&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//安装钩子</span></span><br><span class="line"><span class="comment">//MessageBox(NULL, &quot;DLL_PROCESS_ATTACH taskmgr&quot;, &quot;info&quot;, MB_OK);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!g_bStopHook)</span><br><span class="line">SetHook();</span><br><span class="line"><span class="comment">//卸载钩子</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">DropHook();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> CallNextHookEx(g_hOpenProcessHook, nCode, wParam, lParam);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出函数 加载全局钩子</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport) <span class="function">BOOL <span class="title">SetGoableHook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">g_bStopHook = FALSE;</span><br><span class="line">g_hOpenProcessHook = SetWindowsHookEx(WH_GETMESSAGE,</span><br><span class="line">OpenProcessHookProc,</span><br><span class="line">ModuleFromAddress(OpenProcessHookProc), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (g_hOpenProcessHook == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">char</span> text[<span class="number">30</span>];</span><br><span class="line">wsprintf(text, <span class="string">&quot;HOOK失败！error : %d n&quot;</span>, GetLastError());</span><br><span class="line">MessageBox(<span class="number">0</span>, text, TEXT(<span class="string">&quot;错误&quot;</span>), MB_OK);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出函数 卸载全局钩子</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport) <span class="function">BOOL <span class="title">DropGoableHook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">g_bStopHook = TRUE;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span>  __declspec(dllexport) <span class="function"><span class="keyword">void</span> <span class="title">setData</span><span class="params">(<span class="keyword">int</span> target_pid)</span> </span>&#123;</span><br><span class="line">g_pid = target_pid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span>  __declspec(dllexport) <span class="function"><span class="keyword">int</span> <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> g_pid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">HMODULE WINAPI <span class="title">Detoured</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> s_hDll;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HMODULE hModule,</span></span></span><br><span class="line"><span class="function"><span class="params">DWORD  ul_reason_for_call,</span></span></span><br><span class="line"><span class="function"><span class="params">LPVOID lpReserved</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> </span>&#123;</span><br><span class="line">g_hInstance = (HINSTANCE)hModule;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (ul_reason_for_call) &#123;</span><br><span class="line"><span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">s_hDll = hModule;</span><br><span class="line">DisableThreadLibraryCalls(hModule);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">UnhookWindowsHookEx(g_hOpenProcessHook);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><center>要是感觉不错的话，就留个言评论一下下呀，欢迎各位大哥指正</center>]]></content>
    
    <summary type="html">
    
      利用 detours Hook CreateProcess 实现进程启动拦截
    
    </summary>
    
    
      <category term="C++" scheme="https://www.marxcbr.cn/categories/C/"/>
    
    
      <category term="Hook" scheme="https://www.marxcbr.cn/tags/Hook/"/>
    
      <category term="进程启动拦截" scheme="https://www.marxcbr.cn/tags/%E8%BF%9B%E7%A8%8B%E5%90%AF%E5%8A%A8%E6%8B%A6%E6%88%AA/"/>
    
  </entry>
  
  <entry>
    <title>VS2017 调试DLL的操作办法</title>
    <link href="https://www.marxcbr.cn/archives/cbfbcb33.html"/>
    <id>https://www.marxcbr.cn/archives/cbfbcb33.html</id>
    <published>2020-04-01T06:00:33.000Z</published>
    <updated>2020-12-23T13:48:32.317Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>最近在搞Hook这东西玩，但是，感觉这玩意玩起来有点玄学的意味呀<br />所以，就想着用调试去揭开他的神秘面纱</p><h2 id="简单介绍一下dll"><a class="markdownIt-Anchor" href="#简单介绍一下dll"></a> 简单介绍一下DLL</h2><p>以下是来自百度百科的解释</p><blockquote><p>动态链接库英文为DLL，是Dynamic Link Library的缩写。DLL是一个包含可由多个程序，同时使用的代码和数据的库。在Windows中，这种文件被称为应用程序拓展。例如，在 Windows 操作系统中，Comdlg32.dll 执行与对话框有关的常见函数。因此，每个程序都可以使用该 DLL 中包含的功能来实现“打开”对话框。这有助于避免代码重用和促进内存的有效使用。 通过使用 DLL，程序可以实现模块化，由相对独立的组件组成。例如，一个计账程序可以按模块来销售。可以在运行时将各个模块加载到主程序中（如果安装了相应模块）。因为模块是彼此独立的，所以程序的加载速度更快，而且模块只在相应的功能被请求时才加载。</p></blockquote><h2 id="在vs2017中对dll工程进行设置"><a class="markdownIt-Anchor" href="#在vs2017中对dll工程进行设置"></a> 在VS2017中对DLL工程进行设置</h2><h3 id="进入项目设置"><a class="markdownIt-Anchor" href="#进入项目设置"></a> 进入项目设置</h3><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-1/BogImages/1585721941987.png" alt="MarxCBR的小屋" /></p><p>这里可以分成两种调试办法，一种是非附加调试，另一种是附加到其他进程调试</p><p>区别是什么呢，下面分成两种说明</p><h3 id="非附加调试"><a class="markdownIt-Anchor" href="#非附加调试"></a> 非附加调试</h3><p>非附加调试，一般适用于：<br />本地开发了一个软件，其中某些地方调用了 LoadLibrary 函数去加载我的DLL<br />例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HINSTANCE hDLL = ::LoadLibrary(<span class="string">L&quot;HOOK.dll&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (hDLL) &#123;</span><br><span class="line">    <span class="comment">// do your work</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候，我们要怎么设置项目配置呢<br />按照以下步骤</p><ul><li>调试</li><li>本地Windows调试器</li><li>命令 即将调用到这个dll的exe</li><li>工作目录 .</li></ul><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-1/BogImages/1585722040334.png" alt="MarxCBR的小屋" /></p><h3 id="附加到其他进程调试"><a class="markdownIt-Anchor" href="#附加到其他进程调试"></a> 附加到其他进程调试</h3><p>附加到其他进程调试，一般适用于：<br />本地开发了一个DLL，某个程序会明确的调用到我的DLL，或者，我们通过某些手段使得 目标程序 调用到了我的DLL<br />例如： 我之前发的那篇文章，利用 detours Hook别人的函数，就需要注入dll。</p><p>这个时候，我们要怎么设置项目配置呢<br />按照以下步骤</p><ul><li>调试</li><li>本地Windows调试器</li><li>命令 即将调用到这个dll的exe</li><li>附加 是</li></ul><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-1/BogImages/1585721992676.png" alt="MarxCBR的小屋" /></p><h2 id="测试一下调试效果"><a class="markdownIt-Anchor" href="#测试一下调试效果"></a> 测试一下调试效果</h2><p>我们启动会加载我们将要调试的DLL的进程</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-1/BogImages/1585722821253.png" alt="MarxCBR的小屋" /></p><h2 id="记录一下小坑"><a class="markdownIt-Anchor" href="#记录一下小坑"></a> 记录一下小坑</h2><p>在目标EXE未加载我们的DLL之前进行调试，是无法命中我们的断点的</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-1/BogImages/1585722365251.png" alt="MarxCBR的小屋" /></p><p>在目标进程加载我们的DLL之后，我们的调试则可以命中断点</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-4-1/BogImages/1585722506415.png" alt="MarxCBR的小屋" /></p><center> 要是感觉不错的话，就留个言评论一下下呀，欢迎各位大哥指正 </center>]]></content>
    
    <summary type="html">
    
      VS2017 调试DLL的操作办法
    
    </summary>
    
    
      <category term="Visual Studio" scheme="https://www.marxcbr.cn/categories/Visual-Studio/"/>
    
    
      <category term="调试" scheme="https://www.marxcbr.cn/tags/%E8%B0%83%E8%AF%95/"/>
    
      <category term="Visual Studio" scheme="https://www.marxcbr.cn/tags/Visual-Studio/"/>
    
  </entry>
  
  <entry>
    <title>利用 Detours Hook OpenProcess 实现指定进程保护</title>
    <link href="https://www.marxcbr.cn/archives/1dd9aa1.html"/>
    <id>https://www.marxcbr.cn/archives/1dd9aa1.html</id>
    <published>2020-03-31T14:00:57.000Z</published>
    <updated>2020-12-23T13:48:32.320Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>为什么要去利用 detours 进行 Hook OpenProcess 实现指定进程保护呢<br />因为我的毕设是移动存储设备的安全监控<br />所以，要求软件在电脑上运行的时候，不允许用户自由的关闭程序。得将自己保护起来，就像杀软一样，要先将自己保护好了，再去保护别人</p><h2 id="效果"><a class="markdownIt-Anchor" href="#效果"></a> 效果</h2><p>这次代码贴的有点多，所以，就直接先给大家看看效果</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/Blog/%E6%95%88%E6%9E%9C.gif" alt="" /></p><h2 id="安装detours"><a class="markdownIt-Anchor" href="#安装detours"></a> 安装detours</h2><p>我在这里使用的办法，虽然是最不硬核的办法，但是可能是最节省时间的办法<br />那就是在<strong>NuGet</strong>里面安装</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-3-31/BogImages/1585663612306.png" alt="enter description here" /></p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-3-31/BogImages/1585663665739.png" alt="enter description here" /></p><h2 id="创建准备注入的dll项目"><a class="markdownIt-Anchor" href="#创建准备注入的dll项目"></a> 创建准备注入的dll项目</h2><p>创建新项目去创建一个dll项目</p><p><img src="https://marxcbr.oss-cn-shenzhen.aliyuncs.com/MARXCBR/2020-3-31/BogImages/1585663805600.png" alt="enter description here" /></p><h2 id="声明我们需要的自己的-新-旧-openprocess函数"><a class="markdownIt-Anchor" href="#声明我们需要的自己的-新-旧-openprocess函数"></a> 声明我们需要的自己的 新-旧 OpenProcess函数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">HANDLE</span><span class="params">(WINAPI* pOpenProcess)</span><span class="params">(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwProcessId)</span> </span>= OpenProcess;</span><br><span class="line"></span><br><span class="line"><span class="function">HANDLE WINAPI <span class="title">hOpenProcess</span><span class="params">(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwProcessId)</span> </span>&#123;</span><br><span class="line"><span class="comment">//if (GetProcID(processName) == dwProcessId) &#123;</span></span><br><span class="line"><span class="keyword">if</span> (g_pid == dwProcessId) &#123;</span><br><span class="line">dwDesiredAccess = PROCESS_VM_READ | PROCESS_VM_WRITE | PROCESS_QUERY_INFORMATION;</span><br><span class="line">pubgHandle = pOpenProcess(dwDesiredAccess, bInheritHandle, dwProcessId);</span><br><span class="line">SetLastError(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pOpenProcess(dwDesiredAccess, bInheritHandle, dwProcessId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="声明dll共享节将我们需要保护的进程pid什么的放进去"><a class="markdownIt-Anchor" href="#声明dll共享节将我们需要保护的进程pid什么的放进去"></a> 声明DLL共享节，将我们需要保护的进程pid什么的放进去</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//共享代码段</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> data_seg(<span class="meta-string">&quot;SHARED&quot;</span>)</span></span><br><span class="line"></span><br><span class="line">HHOOK g_hOpenProcessHook = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">BOOL g_bStopHook = FALSE;</span><br><span class="line">BOOL g_bHookInstalled = FALSE;</span><br><span class="line">DWORD g_pid = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> data_seg()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">&quot;/section:SHARED,RWS&quot;</span>)</span></span><br></pre></td></tr></table></figure><h2 id="利用setwindowshookex进行全局hook"><a class="markdownIt-Anchor" href="#利用setwindowshookex进行全局hook"></a> 利用SetWindowsHookEx进行全局HOOK</h2><p>在OpenProcessHookProc这个回调函数中进行处理我们的HOOK</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//导出函数 加载全局钩子</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport) <span class="function">BOOL <span class="title">SetGoableHook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">g_bStopHook = FALSE;</span><br><span class="line">g_hOpenProcessHook = SetWindowsHookEx(WH_GETMESSAGE,</span><br><span class="line">OpenProcessHookProc,</span><br><span class="line">ModuleFromAddress(OpenProcessHookProc), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (g_hOpenProcessHook == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">char</span> text[<span class="number">30</span>];</span><br><span class="line">wsprintf(text, <span class="string">&quot;HOOK失败！error : %d n&quot;</span>, GetLastError());</span><br><span class="line">MessageBox(<span class="number">0</span>, text, TEXT(<span class="string">&quot;错误&quot;</span>), MB_OK);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调用这个保护hook的方法"><a class="markdownIt-Anchor" href="#调用这个保护hook的方法"></a> 调用这个保护HOOK的方法</h2><p>声明两个函数、一个是进行HOOK函数、一个是取消HOOK的函数，可以灵活处理</p><p><strong>此代码处于另一软件项目</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">forLong::myhook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ui.label-&gt;setText(<span class="string">&quot;hooking&quot;</span>);</span><br><span class="line">    HINSTANCE hDLL = ::LoadLibrary(<span class="string">L&quot;HOOK.dll&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hDLL) &#123;</span><br><span class="line"></span><br><span class="line">        PFN_setData setData = (PFN_setData)::GetProcAddress(hDLL, <span class="string">&quot;setData&quot;</span>);</span><br><span class="line">        PFN_getData getData = (PFN_getData)::GetProcAddress(hDLL, <span class="string">&quot;getData&quot;</span>);</span><br><span class="line">        SetGoableHook func = (SetGoableHook)GetProcAddress(hDLL, <span class="string">&quot;SetGoableHook&quot;</span>);</span><br><span class="line">        qDebug() &lt;&lt; (<span class="keyword">int</span>)getpid() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        setData((<span class="keyword">int</span>)getpid());</span><br><span class="line">        <span class="keyword">int</span> s = getData();</span><br><span class="line">        func();</span><br><span class="line">        <span class="comment">/*qDebug() &lt;&lt;  &lt;&lt; endl;*/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">forLong::unhook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ui.label-&gt;setText(<span class="string">&quot;unhook&quot;</span>);</span><br><span class="line">    HINSTANCE hDLL = ::LoadLibrary(<span class="string">L&quot;HOOK.dll&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (hDLL) &#123;</span><br><span class="line">        DropGoableHook func = (DropGoableHook)GetProcAddress(hDLL, <span class="string">&quot;DropGoableHook&quot;</span>);</span><br><span class="line">        func();</span><br><span class="line">        PFN_setData setData = (PFN_setData)::GetProcAddress(hDLL, <span class="string">&quot;setData&quot;</span>);</span><br><span class="line">        PFN_getData getData = (PFN_getData)::GetProcAddress(hDLL, <span class="string">&quot;getData&quot;</span>);</span><br><span class="line">        setData(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//int s = getData();</span></span><br><span class="line">        func();</span><br><span class="line">        <span class="comment">/*   qDebug() &lt;&lt; getData() &lt;&lt; endl;*/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="note warning flat"><p>其实，单纯这样处理，如果单hook一次，任务管理器在重启的时候就会将这个HOOK给绕过了。<br />这样子就办法达到继续HOOK OpenProcess 的目的了</p></div><p>所以，我们得处理一下</p><h2 id="fix掉重启任务管理器绕过hook的方案"><a class="markdownIt-Anchor" href="#fix掉重启任务管理器绕过hook的方案"></a> fix掉重启任务管理器绕过HOOK的方案</h2><p>其实很简单，我们只要监控任务管理器是否启动就可以了<br />只要启动了就即可进行API拦截注入 进行HOOK<br />如果关闭了，则停止HOOK</p><p>代码可以这样写</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">forLong::CheckAppRunningStatus</span><span class="params">(<span class="keyword">const</span> QString&amp; appName)</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Q_OS_WIN</span></span><br><span class="line">    QProcess* process = <span class="keyword">new</span> QProcess;</span><br><span class="line">    process-&gt;start(<span class="string">&quot;tasklist&quot;</span>, QStringList() &lt;&lt; <span class="string">&quot;-fi&quot;</span> &lt;&lt; <span class="string">&quot;imagename eq &quot;</span> + appName);</span><br><span class="line">    process-&gt;waitForFinished();</span><br><span class="line">    QString outputStr = QString::fromLocal8Bit(process-&gt;readAllStandardOutput());</span><br><span class="line">    qDebug() &lt;&lt; outputStr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">if</span> (outputStr.contains(appName))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">forLong::watchTaskmgr</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (CheckAppRunningStatus(<span class="string">&quot;Taskmgr.exe&quot;</span>)) &#123;</span><br><span class="line">            qDebug() &lt;&lt; <span class="string">&quot;Taskmgr&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            myhook();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            qDebug() &lt;&lt; <span class="string">&quot;no  Taskmgr&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            unhook();</span><br><span class="line">        &#125;</span><br><span class="line">        Sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="整个dll项目代码一起给出来吧"><a class="markdownIt-Anchor" href="#整个dll项目代码一起给出来吧"></a> 整个dll项目代码一起给出来吧</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// dllmain.cpp : Defines the entry point for the DLL application.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;detours.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;TlHelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//共享代码段</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> data_seg(<span class="meta-string">&quot;SHARED&quot;</span>)</span></span><br><span class="line">HHOOK g_hMessageHook = <span class="literal">NULL</span>;</span><br><span class="line">HHOOK g_hOpenProcessHook = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">BOOL g_bStopHook = FALSE;</span><br><span class="line">BOOL g_bHookInstalled = FALSE;</span><br><span class="line">DWORD g_pid = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> data_seg()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">&quot;/section:SHARED,RWS&quot;</span>)</span></span><br><span class="line"><span class="comment">//__declspec(allocate(&quot;SHARED&quot;))int g_pid=0;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> HMODULE s_hDll;</span><br><span class="line"></span><br><span class="line">HINSTANCE g_hInstance = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*显示GetLastError的信息*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showerr</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> message[<span class="number">255</span>];</span><br><span class="line">FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM, <span class="number">0</span>, GetLastError()</span><br><span class="line">, MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), message, <span class="number">255</span>, <span class="number">0</span>);</span><br><span class="line">MessageBox(<span class="literal">NULL</span>, message, m, MB_OK);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD <span class="title">MyGetProcessId</span><span class="params">(<span class="keyword">char</span>* ProcessName)</span> </span>&#123;</span><br><span class="line">PROCESSENTRY32 pe32;</span><br><span class="line">pe32.dwSize = <span class="keyword">sizeof</span>(pe32);</span><br><span class="line"><span class="comment">//获得系统内所有进程快照</span></span><br><span class="line">HANDLE hProcessSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (hProcessSnap == INVALID_HANDLE_VALUE)</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line"><span class="comment">//枚举列表中的第一个进程</span></span><br><span class="line">BOOL bProcess = Process32First(hProcessSnap, &amp;pe32);</span><br><span class="line"><span class="keyword">while</span> (bProcess) &#123;</span><br><span class="line"><span class="comment">//比较得到的进程名和要保护的进程名是否相同</span></span><br><span class="line"><span class="keyword">if</span> (stricmp(pe32.szExeFile, ProcessName) == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//相同则返回此进程ID</span></span><br><span class="line"><span class="keyword">return</span> pe32.th32ProcessID;</span><br><span class="line">&#125;</span><br><span class="line">bProcess = Process32Next(hProcessSnap, &amp;pe32);</span><br><span class="line">&#125;</span><br><span class="line">CloseHandle(hProcessSnap);</span><br><span class="line"><span class="comment">//否则返回0</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> ULONG_PTR  DWORD_PTR;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">HANDLE</span><span class="params">(WINAPI* pOpenProcess)</span><span class="params">(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwProcessId)</span> </span>= OpenProcess;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD <span class="title">GetProcID</span><span class="params">(<span class="keyword">char</span>* procName)</span></span>;</span><br><span class="line"></span><br><span class="line">HANDLE pubgHandle = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">char</span>* processName = (<span class="keyword">char</span>*)<span class="string">&quot;forLong.exe&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">HANDLE WINAPI <span class="title">hOpenProcess</span><span class="params">(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwProcessId)</span> </span>&#123;</span><br><span class="line"><span class="comment">//if (GetProcID(processName) == dwProcessId) &#123;</span></span><br><span class="line"><span class="keyword">if</span> (g_pid == dwProcessId) &#123;</span><br><span class="line">dwDesiredAccess = PROCESS_VM_READ | PROCESS_VM_WRITE | PROCESS_QUERY_INFORMATION;</span><br><span class="line">pubgHandle = pOpenProcess(dwDesiredAccess, bInheritHandle, dwProcessId);</span><br><span class="line">SetLastError(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pOpenProcess(dwDesiredAccess, bInheritHandle, dwProcessId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD <span class="title">GetProcID</span><span class="params">(<span class="keyword">char</span>* procName)</span> </span>&#123;</span><br><span class="line">PROCESSENTRY32 pe32;</span><br><span class="line">HANDLE hSnapshot = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">pe32.dwSize = <span class="keyword">sizeof</span>(PROCESSENTRY32);</span><br><span class="line">hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Process32First(hSnapshot, &amp;pe32)) &#123;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(pe32.szExeFile, procName) == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (Process32Next(hSnapshot, &amp;pe32));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hSnapshot != INVALID_HANDLE_VALUE)</span><br><span class="line">CloseHandle(hSnapshot);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pe32.th32ProcessID;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD_PTR <span class="title">GetModuleBaseAddress</span><span class="params">(DWORD pid, TCHAR* name)</span> </span>&#123;</span><br><span class="line">DWORD_PTR baseAddress = <span class="literal">NULL</span>;</span><br><span class="line">HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, pid);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hSnapshot == INVALID_HANDLE_VALUE)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">MODULEENTRY32 entry = &#123; <span class="literal">NULL</span> &#125;;</span><br><span class="line"></span><br><span class="line">entry.dwSize = <span class="keyword">sizeof</span>(MODULEENTRY32);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!Module32First(hSnapshot, &amp;entry)) &#123;</span><br><span class="line">CloseHandle(hSnapshot);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">strcmp</span>(entry.szModule, name)) &#123;</span><br><span class="line">baseAddress = (DWORD_PTR)entry.modBaseAddr;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (Module32Next(hSnapshot, &amp;entry));</span><br><span class="line"></span><br><span class="line">CloseHandle(hSnapshot);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> baseAddress;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hookOpenProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//AllocConsole();</span></span><br><span class="line">DetourTransactionBegin();</span><br><span class="line">DetourUpdateThread(GetCurrentThread());</span><br><span class="line">DetourAttach((PVOID*)&amp;pOpenProcess, hOpenProcess);</span><br><span class="line">DetourTransactionCommit();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (pubgHandle != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">char</span> buffer[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">ReadProcessMemory(pubgHandle, (LPVOID)GetModuleBaseAddress(g_pid, processName), buffer, <span class="number">2</span>, <span class="literal">NULL</span>);</span><br><span class="line">buffer[<span class="number">3</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; buffer &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">SetHook</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//如果已经安装就return</span></span><br><span class="line"><span class="keyword">if</span> (g_bHookInstalled)</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line"></span><br><span class="line">CreateThread(<span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="keyword">reinterpret_cast</span>&lt;LPTHREAD_START_ROUTINE&gt;(hookOpenProcess), <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//CreateThread(NULL, NULL, reinterpret_cast&lt;LPTHREAD_START_ROUTINE&gt;(watch_task), NULL, NULL, NULL);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//char text[30];</span></span><br><span class="line"><span class="comment">//wsprintf(text, &quot;HOOK 启动！: %ld&quot;, GetCurrentThread());</span></span><br><span class="line"><span class="comment">//MessageBox(0, text, TEXT(&quot;OK&quot;), MB_OK);</span></span><br><span class="line"></span><br><span class="line">g_bHookInstalled = TRUE;</span><br><span class="line"><span class="keyword">return</span> g_bHookInstalled;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DropHook</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//如果已经卸载就return</span></span><br><span class="line"><span class="keyword">if</span> (!g_bHookInstalled)<span class="keyword">return</span> TRUE;</span><br><span class="line"></span><br><span class="line"><span class="comment">//char text[30];</span></span><br><span class="line"><span class="comment">//wsprintf(text, &quot;HOOK 解除！: %d&quot;, GetLastError());</span></span><br><span class="line"><span class="comment">//MessageBox(0, text, TEXT(&quot;错误&quot;), MB_OK);</span></span><br><span class="line"></span><br><span class="line">DetourTransactionBegin();</span><br><span class="line">DetourUpdateThread(GetCurrentThread());</span><br><span class="line">DetourDetach((PVOID*)&amp;pOpenProcess, hOpenProcess);</span><br><span class="line"></span><br><span class="line">LONG ret = DetourTransactionCommit();</span><br><span class="line">g_bHookInstalled = FALSE;</span><br><span class="line"><span class="keyword">return</span> ret == NO_ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找函数地址</span></span><br><span class="line"><span class="function">HMODULE WINAPI <span class="title">ModuleFromAddress</span><span class="params">(PVOID pv)</span> </span>&#123;</span><br><span class="line">MEMORY_BASIC_INFORMATION mbi;</span><br><span class="line"><span class="keyword">if</span> (::VirtualQuery(pv, &amp;mbi, <span class="keyword">sizeof</span>(mbi)) != <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> (HMODULE)mbi.AllocationBase;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> LRESULT CALLBACK <span class="title">OpenProcessHookProc</span><span class="params">(<span class="keyword">int</span> nCode, WPARAM wParam, LPARAM lParam)</span> </span>&#123;</span><br><span class="line">PKBDLLHOOKSTRUCT p = (PKBDLLHOOKSTRUCT)lParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">wchar_t</span> Dir[_MAX_DIR];</span><br><span class="line"><span class="keyword">wchar_t</span> FullPath[MAX_PATH]; <span class="comment">// [sp+200h] [bp-614h]@1</span></span><br><span class="line"><span class="keyword">wchar_t</span> Ext[_MAX_EXT];</span><br><span class="line"><span class="keyword">wchar_t</span> Filename[_MAX_FNAME];</span><br><span class="line"><span class="keyword">wchar_t</span> Drive[_MAX_DRIVE];</span><br><span class="line">GetModuleFileNameW(<span class="number">0</span>, FullPath, MAX_PATH);</span><br><span class="line">_wsplitpath_s(FullPath, Drive, _MAX_DRIVE, Dir, _MAX_DIR, Filename, _MAX_FNAME, Ext, _MAX_EXT);</span><br><span class="line"></span><br><span class="line"><span class="built_in">wstring</span> tar = Filename;</span><br><span class="line"></span><br><span class="line">transform(tar.begin(), tar.end(), tar.begin(), towlower);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (_wcsicmp(Filename, <span class="string">L&quot;Taskmgr&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//安装钩子</span></span><br><span class="line"><span class="comment">//MessageBox(NULL, &quot;DLL_PROCESS_ATTACH taskmgr&quot;, &quot;info&quot;, MB_OK);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!g_bStopHook)</span><br><span class="line">SetHook();</span><br><span class="line"><span class="comment">//卸载钩子</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">DropHook();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> CallNextHookEx(g_hOpenProcessHook, nCode, wParam, lParam);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出函数 加载全局钩子</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport) <span class="function">BOOL <span class="title">SetGoableHook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">g_bStopHook = FALSE;</span><br><span class="line">g_hOpenProcessHook = SetWindowsHookEx(WH_GETMESSAGE,</span><br><span class="line">OpenProcessHookProc,</span><br><span class="line">ModuleFromAddress(OpenProcessHookProc), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (g_hOpenProcessHook == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">char</span> text[<span class="number">30</span>];</span><br><span class="line">wsprintf(text, <span class="string">&quot;HOOK失败！error : %d n&quot;</span>, GetLastError());</span><br><span class="line">MessageBox(<span class="number">0</span>, text, TEXT(<span class="string">&quot;错误&quot;</span>), MB_OK);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出函数 卸载全局钩子</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport) <span class="function">BOOL <span class="title">DropGoableHook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">g_bStopHook = TRUE;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span>  __declspec(dllexport) <span class="function"><span class="keyword">void</span> <span class="title">setData</span><span class="params">(<span class="keyword">int</span> target_pid)</span> </span>&#123;</span><br><span class="line">g_pid = target_pid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span>  __declspec(dllexport) <span class="function"><span class="keyword">int</span> <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> g_pid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">HMODULE WINAPI <span class="title">Detoured</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> s_hDll;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HMODULE hModule,</span></span></span><br><span class="line"><span class="function"><span class="params">DWORD  ul_reason_for_call,</span></span></span><br><span class="line"><span class="function"><span class="params">LPVOID lpReserved</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> </span>&#123;</span><br><span class="line">g_hInstance = (HINSTANCE)hModule;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (ul_reason_for_call) &#123;</span><br><span class="line"><span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">s_hDll = hModule;</span><br><span class="line">DisableThreadLibraryCalls(hModule);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">UnhookWindowsHookEx(g_hOpenProcessHook);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><center>要是感觉不错的话，就留个言评论一下下呀，欢迎各位大哥指正</center>]]></content>
    
    <summary type="html">
    
      利用 Detours hook OpenProcess 实现指定进程保护
    
    </summary>
    
    
      <category term="C++" scheme="https://www.marxcbr.cn/categories/C/"/>
    
    
      <category term="Hook" scheme="https://www.marxcbr.cn/tags/Hook/"/>
    
      <category term="进程保护" scheme="https://www.marxcbr.cn/tags/%E8%BF%9B%E7%A8%8B%E4%BF%9D%E6%8A%A4/"/>
    
  </entry>
  
</feed>
